# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module Libxlsxwriter
  extend FFI::Library

  LIB_FILENAME = if RUBY_PLATFORM =~ /darwin/
    "libxlsxwriter.dylib"
  else
    "libxlsxwriter.so"
  end

  ffi_lib File.expand_path("./../../../libxlsxwriter/lib/#{LIB_FILENAME}", __FILE__)

  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  SHEETNAME_MAX = 31
  
  MAX_COL_NAME_LENGTH = "$XFD".length
  
  MAX_ROW_NAME_LENGTH = "$1048576".length
  
  MAX_CELL_NAME_LENGTH = "$XFWD$1048576".length
  
  DATETIME_LENGTH = "2016-12-12T23:00:00Z".length
  
  EPOCH_1900 = 0
  
  EPOCH_1904 = 1
  
  UINT32_T_LENGTH = "4294967296".length
  
  FILENAME_LENGTH = 128
  
  IGNORE = 1
  
  SCHEMA_MS = "http://schemas.microsoft.com/office/2006/relationships"
  
  SCHEMA_ROOT = "http://schemas.openxmlformats.org"
  
  def error(message)
    raise NotImplementedError
  end
  
  def mem_error()
    error("Memory allocation failed.")
  end
  
  def warn(message)
    raise NotImplementedError
  end
  
  def warn_format(message)
    raise NotImplementedError
  end
  
  def warn_format1(message, var)
    raise NotImplementedError
  end
  
  def warn_format2(message, var1, var2)
    raise NotImplementedError
  end
  
  def uint32_host(n)
    n
  end
  
  FORMAT_FIELD_LEN = 128
  
  DEFAULT_FONT_NAME = "Calibri"
  
  DEFAULT_FONT_FAMILY = 2
  
  DEFAULT_FONT_THEME = 1
  
  PROPERTY_UNSET = -1
  
  COLOR_UNSET = -1
  
  COLOR_MASK = 0xFFFFFF
  
  MIN_FONT_SIZE = 1.0
  
  MAX_FONT_SIZE = 409.0
  
  CHART_NUM_FORMAT_LEN = 128
  
  CHART_DEFAULT_GAP = 501
  
  def cell(cell)
    return name_to_row(cell), name_to_col(cell)
  end
  
  def cols(cols)
    return name_to_col(cols), name_to_col_2(cols)
  end
  
  def range(range)
    return name_to_row(range), name_to_col(range), name_to_row_2(range), name_to_col_2(range)
  end
  
  ROW_MAX = 1048576
  
  COL_MAX = 16384
  
  COL_META_MAX = 128
  
  HEADER_FOOTER_MAX = 255
  
  MAX_NUMBER_URLS = 65530
  
  PANE_NAME_LENGTH = 12
  
  BREAKS_MAX = 1023
  
  DEFINED_NAME_LENGTH = 128
  
  APP_PACKAGE = "application/vnd.openxmlformats-package."
  
  APP_DOCUMENT = "application/vnd.openxmlformats-officedocument."
  
  ZIP_BUFFER_SIZE = 16384
  
  MAX_ATTRIBUTE_LENGTH = 256
  
  ATTR_32 = 32
  
  VERSION = "0.7.6"
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:boolean).</em>
  # 
  # === Options:
  # :false_ ::
  #   False value.
  # :true_ ::
  #   True value.
  # 
  # @method _enum_boolean_
  # @return [Symbol]
  # @scope class
  enum :boolean, [
    :false_, 0,
    :true_, 1
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:error).</em>
  # 
  # === Options:
  # :no_error ::
  #   No error.
  # :error_memory_malloc_failed ::
  #   Memory error, failed to malloc() required memory.
  # :error_creating_xlsx_file ::
  #   Error creating output xlsx file. Usually a permissions error.
  # :error_creating_tmpfile ::
  #   Error encountered when creating a tmpfile during file assembly.
  # :error_zip_file_operation ::
  #   Zlib error with a file operation while creating xlsx file.
  # :error_zip_file_add ::
  #   Zlib error when adding sub file to xlsx file.
  # :error_zip_close ::
  #   Zlib error when closing xlsx file.
  # :error_null_parameter_ignored ::
  #   NULL function parameter ignored.
  # :error_parameter_validation ::
  #   Function parameter validation error.
  # :error_sheetname_length_exceeded ::
  #   Worksheet name exceeds Excel's limit of 31 characters.
  # :error_invalid_sheetname_character ::
  #   Worksheet name contains invalid Excel character: '():*?/\\'
  # :error_sheetname_already_used ::
  #   Worksheet name is already in use.
  # :error_32_string_length_exceeded ::
  #   Parameter exceeds Excel's limit of 32 characters.
  # :error_128_string_length_exceeded ::
  #   Parameter exceeds Excel's limit of 128 characters.
  # :error_255_string_length_exceeded ::
  #   Parameter exceeds Excel's limit of 255 characters.
  # :error_max_string_length_exceeded ::
  #   String exceeds Excel's limit of 32,767 characters.
  # :error_shared_string_index_not_found ::
  #   Error finding internal string index.
  # :error_worksheet_index_out_of_range ::
  #   Worksheet row or column index out of range.
  # :error_worksheet_max_number_urls_exceeded ::
  #   Maximum number of worksheet URLs (65530) exceeded.
  # :error_image_dimensions ::
  #   Couldn't read image dimensions or DPI.
  # :max_errno ::
  #   
  # 
  # @method _enum_error_
  # @return [Symbol]
  # @scope class
  enum :error, [
    :no_error, 0,
    :error_memory_malloc_failed, 1,
    :error_creating_xlsx_file, 2,
    :error_creating_tmpfile, 3,
    :error_zip_file_operation, 4,
    :error_zip_file_add, 5,
    :error_zip_close, 6,
    :error_null_parameter_ignored, 7,
    :error_parameter_validation, 8,
    :error_sheetname_length_exceeded, 9,
    :error_invalid_sheetname_character, 10,
    :error_sheetname_already_used, 11,
    :error_32_string_length_exceeded, 12,
    :error_128_string_length_exceeded, 13,
    :error_255_string_length_exceeded, 14,
    :error_max_string_length_exceeded, 15,
    :error_shared_string_index_not_found, 16,
    :error_worksheet_index_out_of_range, 17,
    :error_worksheet_max_number_urls_exceeded, 18,
    :error_image_dimensions, 19,
    :max_errno, 20
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :year ::
  #   (Integer) Year     : 1900 - 9999
  # :month ::
  #   (Integer) Month    : 1 - 12
  # :day ::
  #   (Integer) Day      : 1 - 31
  # :hour ::
  #   (Integer) Hour     : 0 - 23
  # :min ::
  #   (Integer) Minute   : 0 - 59
  # :sec ::
  #   (Float) Seconds  : 0 - 59.999
  module DatetimeWrappers
    # @param [Integer] date_1904 
    # @return [Float] 
    def to_excel_date(date_1904)
      Libxlsxwriter.datetime_to_excel_date(self, date_1904)
    end
  end
  
  class Datetime < FFI::Struct
    include DatetimeWrappers
    layout :year, :int,
           :month, :int,
           :day, :int,
           :hour, :int,
           :min, :int,
           :sec, :double
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:custom_property_types).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :string ::
  #   
  # :double ::
  #   
  # :integer ::
  #   
  # :boolean ::
  #   
  # :datetime ::
  #   
  # 
  # @method _enum_custom_property_types_
  # @return [Symbol]
  # @scope class
  enum :custom_property_types, [
    :none, 0,
    :string, 1,
    :double, 2,
    :integer, 3,
    :boolean, 4,
    :datetime, 5
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*Format)) 
  # :stqh_last ::
  #   (FFI::Pointer(**Format)) 
  class Formats < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*Tuple)) 
  # :stqh_last ::
  #   (FFI::Pointer(**Tuple)) 
  class Tuples < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*CustomProperty)) 
  # :stqh_last ::
  #   (FFI::Pointer(**CustomProperty)) 
  class CustomProperties < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*Tuple)) 
  class TupleListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :key ::
  #   (String) 
  # :value ::
  #   (String) 
  # :list_pointers ::
  #   (TupleListPointers) 
  class Tuple < FFI::Struct
    layout :key, :string,
           :value, :string,
           :list_pointers, TupleListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :string ::
  #   (String) 
  # :number ::
  #   (Float) 
  # :integer ::
  #   (Integer) 
  # :boolean ::
  #   (Integer) 
  # :datetime ::
  #   (Datetime) 
  class CustomPropertyU < FFI::Union
    layout :string, :string,
           :number, :double,
           :integer, :int,
           :boolean, :uchar,
           :datetime, Datetime.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*CustomProperty)) 
  class CustomPropertyListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :type ::
  #   (Symbol from _enum_custom_property_types_) 
  # :name ::
  #   (String) 
  # :u ::
  #   (CustomPropertyU) 
  # :list_pointers ::
  #   (CustomPropertyListPointers) 
  class CustomProperty < FFI::Struct
    layout :type, :custom_property_types,
           :name, :string,
           :u, CustomPropertyU.by_value,
           :list_pointers, CustomPropertyListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :rbh_root ::
  #   (FFI::Pointer(*SstElement)) 
  class SstRbTree < FFI::Struct
    layout :rbh_root, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*SstElement)) 
  # :stqh_last ::
  #   (FFI::Pointer(**SstElement)) 
  class SstOrderList < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*SstElement)) 
  class SstElementSstOrderPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :rbe_left ::
  #   (FFI::Pointer(*SstElement)) 
  # :rbe_right ::
  #   (FFI::Pointer(*SstElement)) 
  # :rbe_parent ::
  #   (FFI::Pointer(*SstElement)) 
  # :rbe_color ::
  #   (Integer) 
  class SstElementSstTreePointers < FFI::Struct
    layout :rbe_left, :pointer,
           :rbe_right, :pointer,
           :rbe_parent, :pointer,
           :rbe_color, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :index ::
  #   (Integer) 
  # :string ::
  #   (String) 
  # :sst_order_pointers ::
  #   (SstElementSstOrderPointers) 
  # :sst_tree_pointers ::
  #   (SstElementSstTreePointers) 
  class SstElement < FFI::Struct
    layout :index, :uint,
           :string, :string,
           :sst_order_pointers, SstElementSstOrderPointers.by_value,
           :sst_tree_pointers, SstElementSstTreePointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :string_count ::
  #   (Integer) 
  # :unique_count ::
  #   (Integer) 
  # :order_list ::
  #   (SstOrderList) 
  # :rb_tree ::
  #   (SstRbTree) 
  module SstWrappers
    # @return [nil] 
    def free()
      Libxlsxwriter.sst_free(self)
    end
    
    # @return [nil] 
    def assemble_xml_file()
      Libxlsxwriter.sst_assemble_xml_file(self)
    end
  end
  
  class Sst < FFI::Struct
    include SstWrappers
    layout :file, :pointer,
           :string_count, :uint,
           :unique_count, :uint,
           :order_list, SstOrderList,
           :rb_tree, SstRbTree
  end
  
  # (Not documented)
  # 
  # @method sst_new()
  # @return [Sst] 
  # @scope class
  attach_function :sst_new, :lxw_sst_new, [], Sst
  
  # (Not documented)
  # 
  # @method sst_free(sst)
  # @param [Sst] sst 
  # @return [nil] 
  # @scope class
  attach_function :sst_free, :lxw_sst_free, [Sst], :void
  
  # (Not documented)
  # 
  # @method get_sst_index(sst, string)
  # @param [Sst] sst 
  # @param [String] string 
  # @return [SstElement] 
  # @scope class
  attach_function :get_sst_index, :lxw_get_sst_index, [Sst, :string], SstElement
  
  # (Not documented)
  # 
  # @method sst_assemble_xml_file(self_)
  # @param [Sst] self_ 
  # @return [nil] 
  # @scope class
  attach_function :sst_assemble_xml_file, :lxw_sst_assemble_xml_file, [Sst], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*HashElement)) 
  # :stqh_last ::
  #   (FFI::Pointer(**HashElement)) 
  class HashOrderList < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :slh_first ::
  #   (FFI::Pointer(*HashElement)) 
  class HashBucketList < FFI::Struct
    layout :slh_first, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :num_buckets ::
  #   (Integer) 
  # :used_buckets ::
  #   (Integer) 
  # :unique_count ::
  #   (Integer) 
  # :free_key ::
  #   (Integer) 
  # :free_value ::
  #   (Integer) 
  # :order_list ::
  #   (HashOrderList) 
  # :buckets ::
  #   (FFI::Pointer(**HashBucketList)) 
  class HashTable < FFI::Struct
    layout :num_buckets, :uint,
           :used_buckets, :uint,
           :unique_count, :uint,
           :free_key, :uchar,
           :free_value, :uchar,
           :order_list, HashOrderList,
           :buckets, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*HashElement)) 
  class HashElementHashOrderPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :sle_next ::
  #   (FFI::Pointer(*HashElement)) 
  class HashElementHashListPointers < FFI::Struct
    layout :sle_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :key ::
  #   (FFI::Pointer(*Void)) 
  # :value ::
  #   (FFI::Pointer(*Void)) 
  # :hash_order_pointers ::
  #   (HashElementHashOrderPointers) 
  # :hash_list_pointers ::
  #   (HashElementHashListPointers) 
  class HashElement < FFI::Struct
    layout :key, :pointer,
           :value, :pointer,
           :hash_order_pointers, HashElementHashOrderPointers.by_value,
           :hash_list_pointers, HashElementHashListPointers.by_value
  end
  
  # (Not documented)
  # 
  # @method hash_key_exists(hash, key, key_len)
  # @param [HashTable] hash 
  # @param [FFI::Pointer(*Void)] key 
  # @param [Integer] key_len 
  # @return [HashElement] 
  # @scope class
  attach_function :hash_key_exists, :lxw_hash_key_exists, [HashTable, :pointer, :ulong], HashElement
  
  # (Not documented)
  # 
  # @method insert_hash_element(hash, key, value, key_len)
  # @param [HashTable] hash 
  # @param [FFI::Pointer(*Void)] key 
  # @param [FFI::Pointer(*Void)] value 
  # @param [Integer] key_len 
  # @return [HashElement] 
  # @scope class
  attach_function :insert_hash_element, :lxw_insert_hash_element, [HashTable, :pointer, :pointer, :ulong], HashElement
  
  # (Not documented)
  # 
  # @method hash_new(num_buckets, free_key, free_value)
  # @param [Integer] num_buckets 
  # @param [Integer] free_key 
  # @param [Integer] free_value 
  # @return [HashTable] 
  # @scope class
  attach_function :hash_new, :lxw_hash_new, [:uint, :uchar, :uchar], HashTable
  
  # (Not documented)
  # 
  # @method hash_free(hash)
  # @param [HashTable] hash 
  # @return [nil] 
  # @scope class
  attach_function :hash_free, :lxw_hash_free, [HashTable], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:format_underlines).</em>
  # 
  # === Options:
  # :underline_single ::
  #   Single underline
  # :underline_double ::
  #   Double underline
  # :underline_single_accounting ::
  #   Single accounting underline
  # :underline_double_accounting ::
  #   Double accounting underline
  # 
  # @method _enum_format_underlines_
  # @return [Symbol]
  # @scope class
  enum :format_underlines, [
    :underline_single, 1,
    :underline_double, 2,
    :underline_single_accounting, 3,
    :underline_double_accounting, 4
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:format_scripts).</em>
  # 
  # === Options:
  # :font_superscript ::
  #   Superscript font
  # :font_subscript ::
  #   Subscript font
  # 
  # @method _enum_format_scripts_
  # @return [Symbol]
  # @scope class
  enum :format_scripts, [
    :font_superscript, 1,
    :font_subscript, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:format_alignments).</em>
  # 
  # === Options:
  # :align_none ::
  #   No alignment. Cell will use Excel's default for the data type
  # :align_left ::
  #   Left horizontal alignment
  # :align_center ::
  #   Center horizontal alignment
  # :align_right ::
  #   Right horizontal alignment
  # :align_fill ::
  #   Cell fill horizontal alignment
  # :align_justify ::
  #   Justify horizontal alignment
  # :align_center_across ::
  #   Center Across horizontal alignment
  # :align_distributed ::
  #   Left horizontal alignment
  # :align_vertical_top ::
  #   Top vertical alignment
  # :align_vertical_bottom ::
  #   Bottom vertical alignment
  # :align_vertical_center ::
  #   Center vertical alignment
  # :align_vertical_justify ::
  #   Justify vertical alignment
  # :align_vertical_distributed ::
  #   Distributed vertical alignment
  # 
  # @method _enum_format_alignments_
  # @return [Symbol]
  # @scope class
  enum :format_alignments, [
    :align_none, 0,
    :align_left, 1,
    :align_center, 2,
    :align_right, 3,
    :align_fill, 4,
    :align_justify, 5,
    :align_center_across, 6,
    :align_distributed, 7,
    :align_vertical_top, 8,
    :align_vertical_bottom, 9,
    :align_vertical_center, 10,
    :align_vertical_justify, 11,
    :align_vertical_distributed, 12
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:format_diagonal_types).</em>
  # 
  # === Options:
  # :border_up ::
  #   
  # :border_down ::
  #   
  # :border_up_down ::
  #   
  # 
  # @method _enum_format_diagonal_types_
  # @return [Symbol]
  # @scope class
  enum :format_diagonal_types, [
    :border_up, 1,
    :border_down, 2,
    :border_up_down, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:defined_colors).</em>
  # 
  # === Options:
  # :color_black ::
  #   Black
  # :color_blue ::
  #   Blue
  # :color_brown ::
  #   Brown
  # :color_cyan ::
  #   Cyan
  # :color_gray ::
  #   Gray
  # :color_green ::
  #   Green
  # :color_lime ::
  #   Lime
  # :color_magenta ::
  #   Magenta
  # :color_navy ::
  #   Navy
  # :color_orange ::
  #   Orange
  # :color_pink ::
  #   Pink
  # :color_purple ::
  #   Purple
  # :color_red ::
  #   Red
  # :color_silver ::
  #   Silver
  # :color_white ::
  #   White
  # :color_yellow ::
  #   Yellow
  # 
  # @method _enum_defined_colors_
  # @return [Symbol]
  # @scope class
  enum :defined_colors, [
    :color_black, 16777216,
    :color_blue, 255,
    :color_brown, 8388608,
    :color_cyan, 65535,
    :color_gray, 8421504,
    :color_green, 32768,
    :color_lime, 65280,
    :color_magenta, 16711935,
    :color_navy, 128,
    :color_orange, 16737792,
    :color_pink, 16711935,
    :color_purple, 8388736,
    :color_red, 16711680,
    :color_silver, 12632256,
    :color_white, 16777215,
    :color_yellow, 16776960
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:format_patterns).</em>
  # 
  # === Options:
  # :pattern_none ::
  #   Empty pattern
  # :pattern_solid ::
  #   Solid pattern
  # :pattern_medium_gray ::
  #   Medium gray pattern
  # :pattern_dark_gray ::
  #   Dark gray pattern
  # :pattern_light_gray ::
  #   Light gray pattern
  # :pattern_dark_horizontal ::
  #   Dark horizontal line pattern
  # :pattern_dark_vertical ::
  #   Dark vertical line pattern
  # :pattern_dark_down ::
  #   Dark diagonal stripe pattern
  # :pattern_dark_up ::
  #   Reverse dark diagonal stripe pattern
  # :pattern_dark_grid ::
  #   Dark grid pattern
  # :pattern_dark_trellis ::
  #   Dark trellis pattern
  # :pattern_light_horizontal ::
  #   Light horizontal Line pattern
  # :pattern_light_vertical ::
  #   Light vertical line pattern
  # :pattern_light_down ::
  #   Light diagonal stripe pattern
  # :pattern_light_up ::
  #   Reverse light diagonal stripe pattern
  # :pattern_light_grid ::
  #   Light grid pattern
  # :pattern_light_trellis ::
  #   Light trellis pattern
  # :pattern_gray_125 ::
  #   12.5% gray pattern
  # :pattern_gray_0625 ::
  #   6.25% gray pattern
  # 
  # @method _enum_format_patterns_
  # @return [Symbol]
  # @scope class
  enum :format_patterns, [
    :pattern_none, 0,
    :pattern_solid, 1,
    :pattern_medium_gray, 2,
    :pattern_dark_gray, 3,
    :pattern_light_gray, 4,
    :pattern_dark_horizontal, 5,
    :pattern_dark_vertical, 6,
    :pattern_dark_down, 7,
    :pattern_dark_up, 8,
    :pattern_dark_grid, 9,
    :pattern_dark_trellis, 10,
    :pattern_light_horizontal, 11,
    :pattern_light_vertical, 12,
    :pattern_light_down, 13,
    :pattern_light_up, 14,
    :pattern_light_grid, 15,
    :pattern_light_trellis, 16,
    :pattern_gray_125, 17,
    :pattern_gray_0625, 18
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:format_borders).</em>
  # 
  # === Options:
  # :border_none ::
  #   No border
  # :border_thin ::
  #   Thin border style
  # :border_medium ::
  #   Medium border style
  # :border_dashed ::
  #   Dashed border style
  # :border_dotted ::
  #   Dotted border style
  # :border_thick ::
  #   Thick border style
  # :border_double ::
  #   Double border style
  # :border_hair ::
  #   Hair border style
  # :border_medium_dashed ::
  #   Medium dashed border style
  # :border_dash_dot ::
  #   Dash-dot border style
  # :border_medium_dash_dot ::
  #   Medium dash-dot border style
  # :border_dash_dot_dot ::
  #   Dash-dot-dot border style
  # :border_medium_dash_dot_dot ::
  #   Medium dash-dot-dot border style
  # :border_slant_dash_dot ::
  #   Slant dash-dot border style
  # 
  # @method _enum_format_borders_
  # @return [Symbol]
  # @scope class
  enum :format_borders, [
    :border_none, 0,
    :border_thin, 1,
    :border_medium, 2,
    :border_dashed, 3,
    :border_dotted, 4,
    :border_thick, 5,
    :border_double, 6,
    :border_hair, 7,
    :border_medium_dashed, 8,
    :border_dash_dot, 9,
    :border_medium_dash_dot, 10,
    :border_dash_dot_dot, 11,
    :border_medium_dash_dot_dot, 12,
    :border_slant_dash_dot, 13
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*Format)) 
  class FormatListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :xf_format_indices ::
  #   (HashTable) 
  # :num_xf_formats ::
  #   (FFI::Pointer(*Uint16T)) 
  # :xf_index ::
  #   (Integer) 
  # :dxf_index ::
  #   (Integer) 
  # :num_format ::
  #   (Array<Integer>) 
  # :font_name ::
  #   (Array<Integer>) 
  # :font_scheme ::
  #   (Array<Integer>) 
  # :num_format_index ::
  #   (Integer) 
  # :font_index ::
  #   (Integer) 
  # :has_font ::
  #   (Integer) 
  # :has_dxf_font ::
  #   (Integer) 
  # :font_size ::
  #   (Float) 
  # :bold ::
  #   (Integer) 
  # :italic ::
  #   (Integer) 
  # :font_color ::
  #   (Integer) 
  # :underline ::
  #   (Integer) 
  # :font_strikeout ::
  #   (Integer) 
  # :font_outline ::
  #   (Integer) 
  # :font_shadow ::
  #   (Integer) 
  # :font_script ::
  #   (Integer) 
  # :font_family ::
  #   (Integer) 
  # :font_charset ::
  #   (Integer) 
  # :font_condense ::
  #   (Integer) 
  # :font_extend ::
  #   (Integer) 
  # :theme ::
  #   (Integer) 
  # :hyperlink ::
  #   (Integer) 
  # :hidden ::
  #   (Integer) 
  # :locked ::
  #   (Integer) 
  # :text_h_align ::
  #   (Integer) 
  # :text_wrap ::
  #   (Integer) 
  # :text_v_align ::
  #   (Integer) 
  # :text_justlast ::
  #   (Integer) 
  # :rotation ::
  #   (Integer) 
  # :fg_color ::
  #   (Integer) 
  # :bg_color ::
  #   (Integer) 
  # :pattern ::
  #   (Integer) 
  # :has_fill ::
  #   (Integer) 
  # :has_dxf_fill ::
  #   (Integer) 
  # :fill_index ::
  #   (Integer) 
  # :fill_count ::
  #   (Integer) 
  # :border_index ::
  #   (Integer) 
  # :has_border ::
  #   (Integer) 
  # :has_dxf_border ::
  #   (Integer) 
  # :border_count ::
  #   (Integer) 
  # :bottom ::
  #   (Integer) 
  # :diag_border ::
  #   (Integer) 
  # :diag_type ::
  #   (Integer) 
  # :left ::
  #   (Integer) 
  # :right ::
  #   (Integer) 
  # :top ::
  #   (Integer) 
  # :bottom_color ::
  #   (Integer) 
  # :diag_color ::
  #   (Integer) 
  # :left_color ::
  #   (Integer) 
  # :right_color ::
  #   (Integer) 
  # :top_color ::
  #   (Integer) 
  # :indent ::
  #   (Integer) 
  # :shrink ::
  #   (Integer) 
  # :merge_range ::
  #   (Integer) 
  # :reading_order ::
  #   (Integer) 
  # :just_distrib ::
  #   (Integer) 
  # :color_indexed ::
  #   (Integer) 
  # :font_only ::
  #   (Integer) 
  # :list_pointers ::
  #   (FormatListPointers) 
  module FormatWrappers
    # @return [nil] 
    def free()
      Libxlsxwriter.format_free(self)
    end
    
    # @return [Integer] 
    def get_xf_index()
      Libxlsxwriter.format_get_xf_index(self)
    end
    
    # @return [Font] 
    def get_font_key()
      Font.new Libxlsxwriter.format_get_font_key(self)
    end
    
    # @return [Border] 
    def get_border_key()
      Border.new Libxlsxwriter.format_get_border_key(self)
    end
    
    # @return [Fill] 
    def get_fill_key()
      Fill.new Libxlsxwriter.format_get_fill_key(self)
    end
    
    # @param [String] font_name 
    # @return [nil] 
    def set_font_name(font_name)
      Libxlsxwriter.format_set_font_name(self, font_name)
    end
    
    # @param [Float] size 
    # @return [nil] 
    def set_font_size(size)
      Libxlsxwriter.format_set_font_size(self, size)
    end
    
    # @param [Integer] color 
    # @return [nil] 
    def set_font_color(color)
      Libxlsxwriter.format_set_font_color(self, color)
    end
    
    # @return [nil] 
    def set_bold()
      Libxlsxwriter.format_set_bold(self)
    end
    
    # @return [nil] 
    def set_italic()
      Libxlsxwriter.format_set_italic(self)
    end
    
    # @param [Integer] style 
    # @return [nil] 
    def set_underline(style)
      Libxlsxwriter.format_set_underline(self, style)
    end
    
    # @return [nil] 
    def set_font_strikeout()
      Libxlsxwriter.format_set_font_strikeout(self)
    end
    
    # @param [Integer] style 
    # @return [nil] 
    def set_font_script(style)
      Libxlsxwriter.format_set_font_script(self, style)
    end
    
    # @param [String] num_format 
    # @return [nil] 
    def set_num_format(num_format)
      Libxlsxwriter.format_set_num_format(self, num_format)
    end
    
    # @param [Integer] index 
    # @return [nil] 
    def set_num_format_index(index)
      Libxlsxwriter.format_set_num_format_index(self, index)
    end
    
    # @return [nil] 
    def set_unlocked()
      Libxlsxwriter.format_set_unlocked(self)
    end
    
    # @return [nil] 
    def set_hidden()
      Libxlsxwriter.format_set_hidden(self)
    end
    
    # @param [Integer] alignment 
    # @return [nil] 
    def set_align(alignment)
      Libxlsxwriter.format_set_align(self, alignment)
    end
    
    # @return [nil] 
    def set_text_wrap()
      Libxlsxwriter.format_set_text_wrap(self)
    end
    
    # @param [Integer] angle 
    # @return [nil] 
    def set_rotation(angle)
      Libxlsxwriter.format_set_rotation(self, angle)
    end
    
    # @param [Integer] level 
    # @return [nil] 
    def set_indent(level)
      Libxlsxwriter.format_set_indent(self, level)
    end
    
    # @return [nil] 
    def set_shrink()
      Libxlsxwriter.format_set_shrink(self)
    end
    
    # @param [Integer] index 
    # @return [nil] 
    def set_pattern(index)
      Libxlsxwriter.format_set_pattern(self, index)
    end
    
    # @param [Integer] color 
    # @return [nil] 
    def set_bg_color(color)
      Libxlsxwriter.format_set_bg_color(self, color)
    end
    
    # @param [Integer] color 
    # @return [nil] 
    def set_fg_color(color)
      Libxlsxwriter.format_set_fg_color(self, color)
    end
    
    # @param [Integer] style 
    # @return [nil] 
    def set_border(style)
      Libxlsxwriter.format_set_border(self, style)
    end
    
    # @param [Integer] style 
    # @return [nil] 
    def set_bottom(style)
      Libxlsxwriter.format_set_bottom(self, style)
    end
    
    # @param [Integer] style 
    # @return [nil] 
    def set_top(style)
      Libxlsxwriter.format_set_top(self, style)
    end
    
    # @param [Integer] style 
    # @return [nil] 
    def set_left(style)
      Libxlsxwriter.format_set_left(self, style)
    end
    
    # @param [Integer] style 
    # @return [nil] 
    def set_right(style)
      Libxlsxwriter.format_set_right(self, style)
    end
    
    # @param [Integer] color 
    # @return [nil] 
    def set_border_color(color)
      Libxlsxwriter.format_set_border_color(self, color)
    end
    
    # @param [Integer] color 
    # @return [nil] 
    def set_bottom_color(color)
      Libxlsxwriter.format_set_bottom_color(self, color)
    end
    
    # @param [Integer] color 
    # @return [nil] 
    def set_top_color(color)
      Libxlsxwriter.format_set_top_color(self, color)
    end
    
    # @param [Integer] color 
    # @return [nil] 
    def set_left_color(color)
      Libxlsxwriter.format_set_left_color(self, color)
    end
    
    # @param [Integer] color 
    # @return [nil] 
    def set_right_color(color)
      Libxlsxwriter.format_set_right_color(self, color)
    end
    
    # @param [Integer] value 
    # @return [nil] 
    def set_diag_type(value)
      Libxlsxwriter.format_set_diag_type(self, value)
    end
    
    # @param [Integer] color 
    # @return [nil] 
    def set_diag_color(color)
      Libxlsxwriter.format_set_diag_color(self, color)
    end
    
    # @param [Integer] value 
    # @return [nil] 
    def set_diag_border(value)
      Libxlsxwriter.format_set_diag_border(self, value)
    end
    
    # @return [nil] 
    def set_font_outline()
      Libxlsxwriter.format_set_font_outline(self)
    end
    
    # @return [nil] 
    def set_font_shadow()
      Libxlsxwriter.format_set_font_shadow(self)
    end
    
    # @param [Integer] value 
    # @return [nil] 
    def set_font_family(value)
      Libxlsxwriter.format_set_font_family(self, value)
    end
    
    # @param [Integer] value 
    # @return [nil] 
    def set_font_charset(value)
      Libxlsxwriter.format_set_font_charset(self, value)
    end
    
    # @param [String] font_scheme 
    # @return [nil] 
    def set_font_scheme(font_scheme)
      Libxlsxwriter.format_set_font_scheme(self, font_scheme)
    end
    
    # @return [nil] 
    def set_font_condense()
      Libxlsxwriter.format_set_font_condense(self)
    end
    
    # @return [nil] 
    def set_font_extend()
      Libxlsxwriter.format_set_font_extend(self)
    end
    
    # @param [Integer] value 
    # @return [nil] 
    def set_reading_order(value)
      Libxlsxwriter.format_set_reading_order(self, value)
    end
    
    # @param [Integer] value 
    # @return [nil] 
    def set_theme(value)
      Libxlsxwriter.format_set_theme(self, value)
    end
  end
  
  class Format < FFI::Struct
    include FormatWrappers
    layout :file, :pointer,
           :xf_format_indices, HashTable,
           :num_xf_formats, :pointer,
           :xf_index, :int,
           :dxf_index, :int,
           :num_format, [:char, 128],
           :font_name, [:char, 128],
           :font_scheme, [:char, 128],
           :num_format_index, :ushort,
           :font_index, :ushort,
           :has_font, :uchar,
           :has_dxf_font, :uchar,
           :font_size, :double,
           :bold, :uchar,
           :italic, :uchar,
           :font_color, :int,
           :underline, :uchar,
           :font_strikeout, :uchar,
           :font_outline, :uchar,
           :font_shadow, :uchar,
           :font_script, :uchar,
           :font_family, :uchar,
           :font_charset, :uchar,
           :font_condense, :uchar,
           :font_extend, :uchar,
           :theme, :uchar,
           :hyperlink, :uchar,
           :hidden, :uchar,
           :locked, :uchar,
           :text_h_align, :uchar,
           :text_wrap, :uchar,
           :text_v_align, :uchar,
           :text_justlast, :uchar,
           :rotation, :short,
           :fg_color, :int,
           :bg_color, :int,
           :pattern, :uchar,
           :has_fill, :uchar,
           :has_dxf_fill, :uchar,
           :fill_index, :int,
           :fill_count, :int,
           :border_index, :int,
           :has_border, :uchar,
           :has_dxf_border, :uchar,
           :border_count, :int,
           :bottom, :uchar,
           :diag_border, :uchar,
           :diag_type, :uchar,
           :left, :uchar,
           :right, :uchar,
           :top, :uchar,
           :bottom_color, :int,
           :diag_color, :int,
           :left_color, :int,
           :right_color, :int,
           :top_color, :int,
           :indent, :uchar,
           :shrink, :uchar,
           :merge_range, :uchar,
           :reading_order, :uchar,
           :just_distrib, :uchar,
           :color_indexed, :uchar,
           :font_only, :uchar,
           :list_pointers, FormatListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :font_name ::
  #   (Array<Integer>) 
  # :font_size ::
  #   (Float) 
  # :bold ::
  #   (Integer) 
  # :italic ::
  #   (Integer) 
  # :underline ::
  #   (Integer) 
  # :font_strikeout ::
  #   (Integer) 
  # :font_outline ::
  #   (Integer) 
  # :font_shadow ::
  #   (Integer) 
  # :font_script ::
  #   (Integer) 
  # :font_family ::
  #   (Integer) 
  # :font_charset ::
  #   (Integer) 
  # :font_condense ::
  #   (Integer) 
  # :font_extend ::
  #   (Integer) 
  # :font_color ::
  #   (Integer) 
  class Font < FFI::Struct
    layout :font_name, [:char, 128],
           :font_size, :double,
           :bold, :uchar,
           :italic, :uchar,
           :underline, :uchar,
           :font_strikeout, :uchar,
           :font_outline, :uchar,
           :font_shadow, :uchar,
           :font_script, :uchar,
           :font_family, :uchar,
           :font_charset, :uchar,
           :font_condense, :uchar,
           :font_extend, :uchar,
           :font_color, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :bottom ::
  #   (Integer) 
  # :diag_border ::
  #   (Integer) 
  # :diag_type ::
  #   (Integer) 
  # :left ::
  #   (Integer) 
  # :right ::
  #   (Integer) 
  # :top ::
  #   (Integer) 
  # :bottom_color ::
  #   (Integer) 
  # :diag_color ::
  #   (Integer) 
  # :left_color ::
  #   (Integer) 
  # :right_color ::
  #   (Integer) 
  # :top_color ::
  #   (Integer) 
  class Border < FFI::Struct
    layout :bottom, :uchar,
           :diag_border, :uchar,
           :diag_type, :uchar,
           :left, :uchar,
           :right, :uchar,
           :top, :uchar,
           :bottom_color, :int,
           :diag_color, :int,
           :left_color, :int,
           :right_color, :int,
           :top_color, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :fg_color ::
  #   (Integer) 
  # :bg_color ::
  #   (Integer) 
  # :pattern ::
  #   (Integer) 
  class Fill < FFI::Struct
    layout :fg_color, :int,
           :bg_color, :int,
           :pattern, :uchar
  end
  
  # (Not documented)
  # 
  # @method format_new()
  # @return [Format] 
  # @scope class
  attach_function :format_new, :lxw_format_new, [], Format
  
  # (Not documented)
  # 
  # @method format_free(format)
  # @param [Format] format 
  # @return [nil] 
  # @scope class
  attach_function :format_free, :lxw_format_free, [Format], :void
  
  # (Not documented)
  # 
  # @method format_get_xf_index(format)
  # @param [Format] format 
  # @return [Integer] 
  # @scope class
  attach_function :format_get_xf_index, :lxw_format_get_xf_index, [Format], :int
  
  # (Not documented)
  # 
  # @method format_get_font_key(format)
  # @param [Format] format 
  # @return [Font] 
  # @scope class
  attach_function :format_get_font_key, :lxw_format_get_font_key, [Format], Font
  
  # (Not documented)
  # 
  # @method format_get_border_key(format)
  # @param [Format] format 
  # @return [Border] 
  # @scope class
  attach_function :format_get_border_key, :lxw_format_get_border_key, [Format], Border
  
  # (Not documented)
  # 
  # @method format_get_fill_key(format)
  # @param [Format] format 
  # @return [Fill] 
  # @scope class
  attach_function :format_get_fill_key, :lxw_format_get_fill_key, [Format], Fill
  
  # (Not documented)
  # 
  # @method format_check_color(color)
  # @param [Integer] color 
  # @return [Integer] 
  # @scope class
  attach_function :format_check_color, :lxw_format_check_color, [:int], :int
  
  # (Not documented)
  # 
  # @method format_set_font_name(format, font_name)
  # @param [Format] format 
  # @param [String] font_name 
  # @return [nil] 
  # @scope class
  attach_function :format_set_font_name, :format_set_font_name, [Format, :string], :void
  
  # (Not documented)
  # 
  # @method format_set_font_size(format, size)
  # @param [Format] format 
  # @param [Float] size 
  # @return [nil] 
  # @scope class
  attach_function :format_set_font_size, :format_set_font_size, [Format, :double], :void
  
  # (Not documented)
  # 
  # @method format_set_font_color(format, color)
  # @param [Format] format 
  # @param [Integer] color 
  # @return [nil] 
  # @scope class
  attach_function :format_set_font_color, :format_set_font_color, [Format, :int], :void
  
  # (Not documented)
  # 
  # @method format_set_bold(format)
  # @param [Format] format 
  # @return [nil] 
  # @scope class
  attach_function :format_set_bold, :format_set_bold, [Format], :void
  
  # (Not documented)
  # 
  # @method format_set_italic(format)
  # @param [Format] format 
  # @return [nil] 
  # @scope class
  attach_function :format_set_italic, :format_set_italic, [Format], :void
  
  # (Not documented)
  # 
  # @method format_set_underline(format, style)
  # @param [Format] format 
  # @param [Integer] style 
  # @return [nil] 
  # @scope class
  attach_function :format_set_underline, :format_set_underline, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_font_strikeout(format)
  # @param [Format] format 
  # @return [nil] 
  # @scope class
  attach_function :format_set_font_strikeout, :format_set_font_strikeout, [Format], :void
  
  # (Not documented)
  # 
  # @method format_set_font_script(format, style)
  # @param [Format] format 
  # @param [Integer] style 
  # @return [nil] 
  # @scope class
  attach_function :format_set_font_script, :format_set_font_script, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_num_format(format, num_format)
  # @param [Format] format 
  # @param [String] num_format 
  # @return [nil] 
  # @scope class
  attach_function :format_set_num_format, :format_set_num_format, [Format, :string], :void
  
  # (Not documented)
  # 
  # @method format_set_num_format_index(format, index)
  # @param [Format] format 
  # @param [Integer] index 
  # @return [nil] 
  # @scope class
  attach_function :format_set_num_format_index, :format_set_num_format_index, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_unlocked(format)
  # @param [Format] format 
  # @return [nil] 
  # @scope class
  attach_function :format_set_unlocked, :format_set_unlocked, [Format], :void
  
  # (Not documented)
  # 
  # @method format_set_hidden(format)
  # @param [Format] format 
  # @return [nil] 
  # @scope class
  attach_function :format_set_hidden, :format_set_hidden, [Format], :void
  
  # (Not documented)
  # 
  # @method format_set_align(format, alignment)
  # @param [Format] format 
  # @param [Integer] alignment 
  # @return [nil] 
  # @scope class
  attach_function :format_set_align, :format_set_align, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_text_wrap(format)
  # @param [Format] format 
  # @return [nil] 
  # @scope class
  attach_function :format_set_text_wrap, :format_set_text_wrap, [Format], :void
  
  # (Not documented)
  # 
  # @method format_set_rotation(format, angle)
  # @param [Format] format 
  # @param [Integer] angle 
  # @return [nil] 
  # @scope class
  attach_function :format_set_rotation, :format_set_rotation, [Format, :short], :void
  
  # (Not documented)
  # 
  # @method format_set_indent(format, level)
  # @param [Format] format 
  # @param [Integer] level 
  # @return [nil] 
  # @scope class
  attach_function :format_set_indent, :format_set_indent, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_shrink(format)
  # @param [Format] format 
  # @return [nil] 
  # @scope class
  attach_function :format_set_shrink, :format_set_shrink, [Format], :void
  
  # (Not documented)
  # 
  # @method format_set_pattern(format, index)
  # @param [Format] format 
  # @param [Integer] index 
  # @return [nil] 
  # @scope class
  attach_function :format_set_pattern, :format_set_pattern, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_bg_color(format, color)
  # @param [Format] format 
  # @param [Integer] color 
  # @return [nil] 
  # @scope class
  attach_function :format_set_bg_color, :format_set_bg_color, [Format, :int], :void
  
  # (Not documented)
  # 
  # @method format_set_fg_color(format, color)
  # @param [Format] format 
  # @param [Integer] color 
  # @return [nil] 
  # @scope class
  attach_function :format_set_fg_color, :format_set_fg_color, [Format, :int], :void
  
  # (Not documented)
  # 
  # @method format_set_border(format, style)
  # @param [Format] format 
  # @param [Integer] style 
  # @return [nil] 
  # @scope class
  attach_function :format_set_border, :format_set_border, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_bottom(format, style)
  # @param [Format] format 
  # @param [Integer] style 
  # @return [nil] 
  # @scope class
  attach_function :format_set_bottom, :format_set_bottom, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_top(format, style)
  # @param [Format] format 
  # @param [Integer] style 
  # @return [nil] 
  # @scope class
  attach_function :format_set_top, :format_set_top, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_left(format, style)
  # @param [Format] format 
  # @param [Integer] style 
  # @return [nil] 
  # @scope class
  attach_function :format_set_left, :format_set_left, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_right(format, style)
  # @param [Format] format 
  # @param [Integer] style 
  # @return [nil] 
  # @scope class
  attach_function :format_set_right, :format_set_right, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_border_color(format, color)
  # @param [Format] format 
  # @param [Integer] color 
  # @return [nil] 
  # @scope class
  attach_function :format_set_border_color, :format_set_border_color, [Format, :int], :void
  
  # (Not documented)
  # 
  # @method format_set_bottom_color(format, color)
  # @param [Format] format 
  # @param [Integer] color 
  # @return [nil] 
  # @scope class
  attach_function :format_set_bottom_color, :format_set_bottom_color, [Format, :int], :void
  
  # (Not documented)
  # 
  # @method format_set_top_color(format, color)
  # @param [Format] format 
  # @param [Integer] color 
  # @return [nil] 
  # @scope class
  attach_function :format_set_top_color, :format_set_top_color, [Format, :int], :void
  
  # (Not documented)
  # 
  # @method format_set_left_color(format, color)
  # @param [Format] format 
  # @param [Integer] color 
  # @return [nil] 
  # @scope class
  attach_function :format_set_left_color, :format_set_left_color, [Format, :int], :void
  
  # (Not documented)
  # 
  # @method format_set_right_color(format, color)
  # @param [Format] format 
  # @param [Integer] color 
  # @return [nil] 
  # @scope class
  attach_function :format_set_right_color, :format_set_right_color, [Format, :int], :void
  
  # (Not documented)
  # 
  # @method format_set_diag_type(format, value)
  # @param [Format] format 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :format_set_diag_type, :format_set_diag_type, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_diag_color(format, color)
  # @param [Format] format 
  # @param [Integer] color 
  # @return [nil] 
  # @scope class
  attach_function :format_set_diag_color, :format_set_diag_color, [Format, :int], :void
  
  # (Not documented)
  # 
  # @method format_set_diag_border(format, value)
  # @param [Format] format 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :format_set_diag_border, :format_set_diag_border, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_font_outline(format)
  # @param [Format] format 
  # @return [nil] 
  # @scope class
  attach_function :format_set_font_outline, :format_set_font_outline, [Format], :void
  
  # (Not documented)
  # 
  # @method format_set_font_shadow(format)
  # @param [Format] format 
  # @return [nil] 
  # @scope class
  attach_function :format_set_font_shadow, :format_set_font_shadow, [Format], :void
  
  # (Not documented)
  # 
  # @method format_set_font_family(format, value)
  # @param [Format] format 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :format_set_font_family, :format_set_font_family, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_font_charset(format, value)
  # @param [Format] format 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :format_set_font_charset, :format_set_font_charset, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_font_scheme(format, font_scheme)
  # @param [Format] format 
  # @param [String] font_scheme 
  # @return [nil] 
  # @scope class
  attach_function :format_set_font_scheme, :format_set_font_scheme, [Format, :string], :void
  
  # (Not documented)
  # 
  # @method format_set_font_condense(format)
  # @param [Format] format 
  # @return [nil] 
  # @scope class
  attach_function :format_set_font_condense, :format_set_font_condense, [Format], :void
  
  # (Not documented)
  # 
  # @method format_set_font_extend(format)
  # @param [Format] format 
  # @return [nil] 
  # @scope class
  attach_function :format_set_font_extend, :format_set_font_extend, [Format], :void
  
  # (Not documented)
  # 
  # @method format_set_reading_order(format, value)
  # @param [Format] format 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :format_set_reading_order, :format_set_reading_order, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # @method format_set_theme(format, value)
  # @param [Format] format 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :format_set_theme, :format_set_theme, [Format, :uchar], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*ChartSeries)) 
  # :stqh_last ::
  #   (FFI::Pointer(**ChartSeries)) 
  class ChartSeriesList < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*SeriesDataPoint)) 
  # :stqh_last ::
  #   (FFI::Pointer(**SeriesDataPoint)) 
  class SeriesDataPoints < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_type).</em>
  # 
  # === Options:
  # :none ::
  #   None.
  # :area ::
  #   Area chart.
  # :area_stacked ::
  #   Area chart - stacked.
  # :area_stacked_percent ::
  #   Area chart - percentage stacked.
  # :bar ::
  #   Bar chart.
  # :bar_stacked ::
  #   Bar chart - stacked.
  # :bar_stacked_percent ::
  #   Bar chart - percentage stacked.
  # :column ::
  #   Column chart.
  # :column_stacked ::
  #   Column chart - stacked.
  # :column_stacked_percent ::
  #   Column chart - percentage stacked.
  # :doughnut ::
  #   Doughnut chart.
  # :line ::
  #   Line chart.
  # :pie ::
  #   Pie chart.
  # :scatter ::
  #   Scatter chart.
  # :scatter_straight ::
  #   Scatter chart - straight.
  # :scatter_straight_with_markers ::
  #   Scatter chart - straight with markers.
  # :scatter_smooth ::
  #   Scatter chart - smooth.
  # :scatter_smooth_with_markers ::
  #   Scatter chart - smooth with markers.
  # :radar ::
  #   Radar chart.
  # :radar_with_markers ::
  #   Radar chart - with markers.
  # :radar_filled ::
  #   Radar chart - filled.
  # 
  # @method _enum_chart_type_
  # @return [Symbol]
  # @scope class
  enum :chart_type, [
    :none, 0,
    :area, 1,
    :area_stacked, 2,
    :area_stacked_percent, 3,
    :bar, 4,
    :bar_stacked, 5,
    :bar_stacked_percent, 6,
    :column, 7,
    :column_stacked, 8,
    :column_stacked_percent, 9,
    :doughnut, 10,
    :line, 11,
    :pie, 12,
    :scatter, 13,
    :scatter_straight, 14,
    :scatter_straight_with_markers, 15,
    :scatter_smooth, 16,
    :scatter_smooth_with_markers, 17,
    :radar, 18,
    :radar_with_markers, 19,
    :radar_filled, 20
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_legend_position).</em>
  # 
  # === Options:
  # :none ::
  #   No chart legend.
  # :right ::
  #   Chart legend positioned at right side.
  # :left ::
  #   Chart legend positioned at left side.
  # :top ::
  #   Chart legend positioned at top.
  # :bottom ::
  #   Chart legend positioned at bottom.
  # :overlay_right ::
  #   Chart legend overlaid at right side.
  # :overlay_left ::
  #   Chart legend overlaid at left side.
  # 
  # @method _enum_chart_legend_position_
  # @return [Symbol]
  # @scope class
  enum :chart_legend_position, [
    :none, 0,
    :right, 1,
    :left, 2,
    :top, 3,
    :bottom, 4,
    :overlay_right, 5,
    :overlay_left, 6
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_line_dash_type).</em>
  # 
  # === Options:
  # :solid ::
  #   Solid.
  # :round_dot ::
  #   Round Dot.
  # :square_dot ::
  #   Square Dot.
  # :dash ::
  #   Dash.
  # :dash_dot ::
  #   Dash Dot.
  # :long_dash ::
  #   Long Dash.
  # :long_dash_dot ::
  #   Long Dash Dot.
  # :long_dash_dot_dot ::
  #   Long Dash Dot Dot.
  # :dot ::
  #   These aren't available in the dialog but are used by Excel.
  # :system_dash_dot ::
  #   
  # :system_dash_dot_dot ::
  #   
  # 
  # @method _enum_chart_line_dash_type_
  # @return [Symbol]
  # @scope class
  enum :chart_line_dash_type, [
    :solid, 0,
    :round_dot, 1,
    :square_dot, 2,
    :dash, 3,
    :dash_dot, 4,
    :long_dash, 5,
    :long_dash_dot, 6,
    :long_dash_dot_dot, 7,
    :dot, 8,
    :system_dash_dot, 9,
    :system_dash_dot_dot, 10
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_marker_type).</em>
  # 
  # === Options:
  # :automatic ::
  #   Automatic, series default, marker type.
  # :none ::
  #   No marker type.
  # :square ::
  #   Square marker type.
  # :diamond ::
  #   Diamond marker type.
  # :triangle ::
  #   Triangle marker type.
  # :x ::
  #   X shape marker type.
  # :star ::
  #   Star marker type.
  # :short_dash ::
  #   Short dash marker type.
  # :long_dash ::
  #   Long dash marker type.
  # :circle ::
  #   Circle marker type.
  # :plus ::
  #   Plus (+) marker type.
  # 
  # @method _enum_chart_marker_type_
  # @return [Symbol]
  # @scope class
  enum :chart_marker_type, [
    :automatic, 0,
    :none, 1,
    :square, 2,
    :diamond, 3,
    :triangle, 4,
    :x, 5,
    :star, 6,
    :short_dash, 7,
    :long_dash, 8,
    :circle, 9,
    :plus, 10
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_pattern_type).</em>
  # 
  # === Options:
  # :none ::
  #   None pattern.
  # :percent_5 ::
  #   5 Percent pattern.
  # :percent_10 ::
  #   10 Percent pattern.
  # :percent_20 ::
  #   20 Percent pattern.
  # :percent_25 ::
  #   25 Percent pattern.
  # :percent_30 ::
  #   30 Percent pattern.
  # :percent_40 ::
  #   40 Percent pattern.
  # :percent_50 ::
  #   50 Percent pattern.
  # :percent_60 ::
  #   60 Percent pattern.
  # :percent_70 ::
  #   70 Percent pattern.
  # :percent_75 ::
  #   75 Percent pattern.
  # :percent_80 ::
  #   80 Percent pattern.
  # :percent_90 ::
  #   90 Percent pattern.
  # :light_downward_diagonal ::
  #   Light downward diagonal pattern.
  # :light_upward_diagonal ::
  #   Light upward diagonal pattern.
  # :dark_downward_diagonal ::
  #   Dark downward diagonal pattern.
  # :dark_upward_diagonal ::
  #   Dark upward diagonal pattern.
  # :wide_downward_diagonal ::
  #   Wide downward diagonal pattern.
  # :wide_upward_diagonal ::
  #   Wide upward diagonal pattern.
  # :light_vertical ::
  #   Light vertical pattern.
  # :light_horizontal ::
  #   Light horizontal pattern.
  # :narrow_vertical ::
  #   Narrow vertical pattern.
  # :narrow_horizontal ::
  #   Narrow horizontal pattern.
  # :dark_vertical ::
  #   Dark vertical pattern.
  # :dark_horizontal ::
  #   Dark horizontal pattern.
  # :dashed_downward_diagonal ::
  #   Dashed downward diagonal pattern.
  # :dashed_upward_diagonal ::
  #   Dashed upward diagonal pattern.
  # :dashed_horizontal ::
  #   Dashed horizontal pattern.
  # :dashed_vertical ::
  #   Dashed vertical pattern.
  # :small_confetti ::
  #   Small confetti pattern.
  # :large_confetti ::
  #   Large confetti pattern.
  # :zigzag ::
  #   Zigzag pattern.
  # :wave ::
  #   Wave pattern.
  # :diagonal_brick ::
  #   Diagonal brick pattern.
  # :horizontal_brick ::
  #   Horizontal brick pattern.
  # :weave ::
  #   Weave pattern.
  # :plaid ::
  #   Plaid pattern.
  # :divot ::
  #   Divot pattern.
  # :dotted_grid ::
  #   Dotted grid pattern.
  # :dotted_diamond ::
  #   Dotted diamond pattern.
  # :shingle ::
  #   Shingle pattern.
  # :trellis ::
  #   Trellis pattern.
  # :sphere ::
  #   Sphere pattern.
  # :small_grid ::
  #   Small grid pattern.
  # :large_grid ::
  #   Large grid pattern.
  # :small_check ::
  #   Small check pattern.
  # :large_check ::
  #   Large check pattern.
  # :outlined_diamond ::
  #   Outlined diamond pattern.
  # :solid_diamond ::
  #   Solid diamond pattern.
  # 
  # @method _enum_chart_pattern_type_
  # @return [Symbol]
  # @scope class
  enum :chart_pattern_type, [
    :none, 0,
    :percent_5, 1,
    :percent_10, 2,
    :percent_20, 3,
    :percent_25, 4,
    :percent_30, 5,
    :percent_40, 6,
    :percent_50, 7,
    :percent_60, 8,
    :percent_70, 9,
    :percent_75, 10,
    :percent_80, 11,
    :percent_90, 12,
    :light_downward_diagonal, 13,
    :light_upward_diagonal, 14,
    :dark_downward_diagonal, 15,
    :dark_upward_diagonal, 16,
    :wide_downward_diagonal, 17,
    :wide_upward_diagonal, 18,
    :light_vertical, 19,
    :light_horizontal, 20,
    :narrow_vertical, 21,
    :narrow_horizontal, 22,
    :dark_vertical, 23,
    :dark_horizontal, 24,
    :dashed_downward_diagonal, 25,
    :dashed_upward_diagonal, 26,
    :dashed_horizontal, 27,
    :dashed_vertical, 28,
    :small_confetti, 29,
    :large_confetti, 30,
    :zigzag, 31,
    :wave, 32,
    :diagonal_brick, 33,
    :horizontal_brick, 34,
    :weave, 35,
    :plaid, 36,
    :divot, 37,
    :dotted_grid, 38,
    :dotted_diamond, 39,
    :shingle, 40,
    :trellis, 41,
    :sphere, 42,
    :small_grid, 43,
    :large_grid, 44,
    :small_check, 45,
    :large_check, 46,
    :outlined_diamond, 47,
    :solid_diamond, 48
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_label_position).</em>
  # 
  # === Options:
  # :default ::
  #   Series data label position: default position.
  # :center ::
  #   Series data label position: center.
  # :right ::
  #   Series data label position: right.
  # :left ::
  #   Series data label position: left.
  # :above ::
  #   Series data label position: above.
  # :below ::
  #   Series data label position: below.
  # :inside_base ::
  #   Series data label position: inside base. 
  # :inside_end ::
  #   Series data label position: inside end.
  # :outside_end ::
  #   Series data label position: outside end.
  # :best_fit ::
  #   Series data label position: best fit.
  # 
  # @method _enum_chart_label_position_
  # @return [Symbol]
  # @scope class
  enum :chart_label_position, [
    :default, 0,
    :center, 1,
    :right, 2,
    :left, 3,
    :above, 4,
    :below, 5,
    :inside_base, 6,
    :inside_end, 7,
    :outside_end, 8,
    :best_fit, 9
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_label_separator).</em>
  # 
  # === Options:
  # :comma ::
  #   Series data label separator: comma (the default).
  # :semicolon ::
  #   Series data label separator: semicolon.
  # :period ::
  #   Series data label separator: period.
  # :newline ::
  #   Series data label separator: newline.
  # :space ::
  #   Series data label separator: space.
  # 
  # @method _enum_chart_label_separator_
  # @return [Symbol]
  # @scope class
  enum :chart_label_separator, [
    :comma, 0,
    :semicolon, 1,
    :period, 2,
    :newline, 3,
    :space, 4
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_axis_type).</em>
  # 
  # === Options:
  # :x ::
  #   Chart X axis.
  # :y ::
  #   Chart Y axis.
  # 
  # @method _enum_chart_axis_type_
  # @return [Symbol]
  # @scope class
  enum :chart_axis_type, [
    :x, 0,
    :y, 1
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_subtype).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :stacked ::
  #   
  # :stacked_percent ::
  #   
  # 
  # @method _enum_chart_subtype_
  # @return [Symbol]
  # @scope class
  enum :chart_subtype, [
    :none, 0,
    :stacked, 1,
    :stacked_percent, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_grouping).</em>
  # 
  # === Options:
  # :clustered ::
  #   
  # :standard ::
  #   
  # :percentstacked ::
  #   
  # :stacked ::
  #   
  # 
  # @method _enum_chart_grouping_
  # @return [Symbol]
  # @scope class
  enum :chart_grouping, [
    :clustered, 0,
    :standard, 1,
    :percentstacked, 2,
    :stacked, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_axis_tick_position).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :on_tick ::
  #   Position category axis on tick marks.
  # :between ::
  #   Position category axis between tick marks.
  # 
  # @method _enum_chart_axis_tick_position_
  # @return [Symbol]
  # @scope class
  enum :chart_axis_tick_position, [
    :default, 0,
    :on_tick, 1,
    :between, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_axis_label_position).</em>
  # 
  # === Options:
  # :next_to ::
  #   Position the axis labels next to the axis. The default.
  # :high ::
  #   Position the axis labels at the top of the chart, for horizontal
  #   axes, or to the right for vertical axes.
  # :low ::
  #   Position the axis labels at the bottom of the chart, for horizontal
  #   axes, or to the left for vertical axes.
  # :none ::
  #   Turn off the the axis labels.
  # 
  # @method _enum_chart_axis_label_position_
  # @return [Symbol]
  # @scope class
  enum :chart_axis_label_position, [
    :next_to, 0,
    :high, 1,
    :low, 2,
    :none, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_axis_display_unit).</em>
  # 
  # === Options:
  # :units_none ::
  #   Axis display units: None. The default.
  # :units_hundreds ::
  #   Axis display units: Hundreds.
  # :units_thousands ::
  #   Axis display units: Thousands.
  # :units_ten_thousands ::
  #   Axis display units: Ten thousands.
  # :units_hundred_thousands ::
  #   Axis display units: Hundred thousands.
  # :units_millions ::
  #   Axis display units: Millions.
  # :units_ten_millions ::
  #   Axis display units: Ten millions.
  # :units_hundred_millions ::
  #   Axis display units: Hundred millions.
  # :units_billions ::
  #   Axis display units: Billions.
  # :units_trillions ::
  #   Axis display units: Trillions.
  # 
  # @method _enum_chart_axis_display_unit_
  # @return [Symbol]
  # @scope class
  enum :chart_axis_display_unit, [
    :units_none, 0,
    :units_hundreds, 1,
    :units_thousands, 2,
    :units_ten_thousands, 3,
    :units_hundred_thousands, 4,
    :units_millions, 5,
    :units_ten_millions, 6,
    :units_hundred_millions, 7,
    :units_billions, 8,
    :units_trillions, 9
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_axis_tick_mark).</em>
  # 
  # === Options:
  # :default ::
  #   Default tick mark for the chart axis. Usually outside.
  # :none ::
  #   No tick mark for the axis.
  # :inside ::
  #   Tick mark inside the axis only.
  # :outside ::
  #   Tick mark outside the axis only.
  # :crossing ::
  #   Tick mark inside and outside the axis.
  # 
  # @method _enum_chart_axis_tick_mark_
  # @return [Symbol]
  # @scope class
  enum :chart_axis_tick_mark, [
    :default, 0,
    :none, 1,
    :inside, 2,
    :outside, 3,
    :crossing, 4
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :formula ::
  #   (String) 
  # :sheetname ::
  #   (String) 
  # :first_row ::
  #   (Integer) 
  # :last_row ::
  #   (Integer) 
  # :first_col ::
  #   (Integer) 
  # :last_col ::
  #   (Integer) 
  # :ignore_cache ::
  #   (Integer) 
  # :has_string_cache ::
  #   (Integer) 
  # :num_data_points ::
  #   (Integer) 
  # :data_cache ::
  #   (SeriesDataPoints) 
  class SeriesRange < FFI::Struct
    layout :formula, :string,
           :sheetname, :string,
           :first_row, :uint,
           :last_row, :uint,
           :first_col, :ushort,
           :last_col, :ushort,
           :ignore_cache, :uchar,
           :has_string_cache, :uchar,
           :num_data_points, :ushort,
           :data_cache, SeriesDataPoints
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*SeriesDataPoint)) 
  class SeriesDataPointListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :is_string ::
  #   (Integer) 
  # :number ::
  #   (Float) 
  # :string ::
  #   (String) 
  # :no_data ::
  #   (Integer) 
  # :list_pointers ::
  #   (SeriesDataPointListPointers) 
  class SeriesDataPoint < FFI::Struct
    layout :is_string, :uchar,
           :number, :double,
           :string, :string,
           :no_data, :uchar,
           :list_pointers, SeriesDataPointListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :color ::
  #   (Integer) The chart font color. See @ref working_with_colors.
  # :none ::
  #   (Integer) Turn off/hide line. Set to 0 or 1.
  # :width ::
  #   (Float) Width of the line in increments of 0.25. Default is 2.25.
  # :dash_type ::
  #   (Integer) The line dash type. See #lxw_chart_line_dash_type.
  # :transparency ::
  #   (Integer) Set the transparency of the line. 0 - 100. Default 0.
  # :has_color ::
  #   (Integer) Members for internal use only.
  class ChartLine < FFI::Struct
    layout :color, :int,
           :none, :uchar,
           :width, :float,
           :dash_type, :uchar,
           :transparency, :uchar,
           :has_color, :uchar
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :color ::
  #   (Integer) The chart font color. See @ref working_with_colors.
  # :none ::
  #   (Integer) Turn off/hide line. Set to 0 or 1.
  # :transparency ::
  #   (Integer) Set the transparency of the fill. 0 - 100. Default 0.
  # :has_color ::
  #   (Integer) Members for internal use only.
  class ChartFill < FFI::Struct
    layout :color, :int,
           :none, :uchar,
           :transparency, :uchar,
           :has_color, :uchar
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :fg_color ::
  #   (Integer) The pattern foreground color. See @ref working_with_colors.
  # :bg_color ::
  #   (Integer) The pattern background color. See @ref working_with_colors.
  # :type ::
  #   (Integer) The pattern type. See #lxw_chart_pattern_type.
  # :has_fg_color ::
  #   (Integer) Members for internal use only.
  # :has_bg_color ::
  #   (Integer) 
  class ChartPattern < FFI::Struct
    layout :fg_color, :int,
           :bg_color, :int,
           :type, :uchar,
           :has_fg_color, :uchar,
           :has_bg_color, :uchar
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :name ::
  #   (String) The chart font name, such as "Arial" or "Calibri".
  # :size ::
  #   (Float) The chart font size. The default is 11.
  # :bold ::
  #   (Integer) The chart font bold property. Set to 0 or 1.
  # :italic ::
  #   (Integer) The chart font italic property. Set to 0 or 1.
  # :underline ::
  #   (Integer) The chart font underline property. Set to 0 or 1.
  # :rotation ::
  #   (Integer) The chart font rotation property. Range: -90 to 90.
  # :color ::
  #   (Integer) The chart font color. See @ref working_with_colors.
  # :pitch_family ::
  #   (Integer) The chart font pitch family property. Rarely required. set to 0.
  # :charset ::
  #   (Integer) The chart font character set property. Rarely required. set to 0.
  # :baseline ::
  #   (Integer) The chart font baseline property. Rarely required. set to 0.
  # :has_color ::
  #   (Integer) Members for internal use only.
  class ChartFont < FFI::Struct
    layout :name, :string,
           :size, :double,
           :bold, :uchar,
           :italic, :uchar,
           :underline, :uchar,
           :rotation, :int,
           :color, :int,
           :pitch_family, :uchar,
           :charset, :uchar,
           :baseline, :char,
           :has_color, :uchar
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :type ::
  #   (Integer) 
  # :size ::
  #   (Integer) 
  # :line ::
  #   (ChartLine) 
  # :fill ::
  #   (ChartFill) 
  # :pattern ::
  #   (ChartPattern) 
  class ChartMarker < FFI::Struct
    layout :type, :uchar,
           :size, :uchar,
           :line, ChartLine,
           :fill, ChartFill,
           :pattern, ChartPattern
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :font ::
  #   (ChartFont) 
  # :position ::
  #   (Integer) 
  class ChartLegend < FFI::Struct
    layout :font, ChartFont,
           :position, :uchar
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :name ::
  #   (String) 
  # :row ::
  #   (Integer) 
  # :col ::
  #   (Integer) 
  # :font ::
  #   (ChartFont) 
  # :off ::
  #   (Integer) 
  # :is_horizontal ::
  #   (Integer) 
  # :ignore_cache ::
  #   (Integer) 
  # :range ::
  #   (SeriesRange) We use a range to hold the title formula properties even though it
  #   will only have 1 point in order to re-use similar functions.
  # :data_point ::
  #   (SeriesDataPoint) 
  class ChartTitle < FFI::Struct
    layout :name, :string,
           :row, :uint,
           :col, :ushort,
           :font, ChartFont,
           :off, :uchar,
           :is_horizontal, :uchar,
           :ignore_cache, :uchar,
           :range, SeriesRange,
           :data_point, SeriesDataPoint.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :line ::
  #   (ChartLine) The line/border for the chart point. See @ref chart_lines.
  # :fill ::
  #   (ChartFill) The fill for the chart point. See @ref chart_fills.
  # :pattern ::
  #   (ChartPattern) The pattern for the chart point. See @ref chart_patterns.
  class ChartPoint < FFI::Struct
    layout :line, ChartLine,
           :fill, ChartFill,
           :pattern, ChartPattern
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_blank).</em>
  # 
  # === Options:
  # :blanks_as_gap ::
  #   Show empty chart cells as gaps in the data. The default.
  # :blanks_as_zero ::
  #   Show empty chart cells as zeros.
  # :blanks_as_connected ::
  #   Show empty chart cells as connected. Only for charts with lines.
  # 
  # @method _enum_chart_blank_
  # @return [Symbol]
  # @scope class
  enum :chart_blank, [
    :blanks_as_gap, 0,
    :blanks_as_zero, 1,
    :blanks_as_connected, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_position).</em>
  # 
  # === Options:
  # :axis_right ::
  #   
  # :axis_left ::
  #   
  # :axis_top ::
  #   
  # :axis_bottom ::
  #   
  # 
  # @method _enum_chart_position_
  # @return [Symbol]
  # @scope class
  enum :chart_position, [
    :axis_right, 0,
    :axis_left, 1,
    :axis_top, 2,
    :axis_bottom, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_error_bar_type).</em>
  # 
  # === Options:
  # :std_error ::
  #   Error bar type: Standard error.
  # :fixed ::
  #   Error bar type: Fixed value.
  # :percentage ::
  #   Error bar type: Percentage.
  # :std_dev ::
  #   Error bar type: Standard deviation(s).
  # 
  # @method _enum_chart_error_bar_type_
  # @return [Symbol]
  # @scope class
  enum :chart_error_bar_type, [
    :std_error, 0,
    :fixed, 1,
    :percentage, 2,
    :std_dev, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_error_bar_direction).</em>
  # 
  # === Options:
  # :dir_both ::
  #   Error bar extends in both directions. The default.
  # :dir_plus ::
  #   Error bar extends in positive direction.
  # :dir_minus ::
  #   Error bar extends in negative direction.
  # 
  # @method _enum_chart_error_bar_direction_
  # @return [Symbol]
  # @scope class
  enum :chart_error_bar_direction, [
    :dir_both, 0,
    :dir_plus, 1,
    :dir_minus, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_error_bar_axis).</em>
  # 
  # === Options:
  # :x ::
  #   X axis error bar.
  # :y ::
  #   Y axis error bar.
  # 
  # @method _enum_chart_error_bar_axis_
  # @return [Symbol]
  # @scope class
  enum :chart_error_bar_axis, [
    :x, 0,
    :y, 1
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_error_bar_cap).</em>
  # 
  # === Options:
  # :end_ ::
  #   Flat end cap. The default.
  # :no ::
  #   No end cap.
  # 
  # @method _enum_chart_error_bar_cap_
  # @return [Symbol]
  # @scope class
  enum :chart_error_bar_cap, [
    :end_, 0,
    :no, 1
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :type ::
  #   (Integer) 
  # :direction ::
  #   (Integer) 
  # :endcap ::
  #   (Integer) 
  # :has_value ::
  #   (Integer) 
  # :is_set ::
  #   (Integer) 
  # :is_x ::
  #   (Integer) 
  # :chart_group ::
  #   (Integer) 
  # :value ::
  #   (Float) 
  # :line ::
  #   (ChartLine) 
  class SeriesErrorBars < FFI::Struct
    layout :type, :uchar,
           :direction, :uchar,
           :endcap, :uchar,
           :has_value, :uchar,
           :is_set, :uchar,
           :is_x, :uchar,
           :chart_group, :uchar,
           :value, :double,
           :line, ChartLine
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:chart_trendline_type).</em>
  # 
  # === Options:
  # :linear ::
  #   Trendline type: Linear.
  # :log ::
  #   Trendline type: Logarithm.
  # :poly ::
  #   Trendline type: Polynomial.
  # :power ::
  #   Trendline type: Power.
  # :exp ::
  #   Trendline type: Exponential.
  # :average ::
  #   Trendline type: Moving Average.
  # 
  # @method _enum_chart_trendline_type_
  # @return [Symbol]
  # @scope class
  enum :chart_trendline_type, [
    :linear, 0,
    :log, 1,
    :poly, 2,
    :power, 3,
    :exp, 4,
    :average, 5
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*ChartSeries)) 
  class ChartSeriesListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :categories ::
  #   (SeriesRange) 
  # :values ::
  #   (SeriesRange) 
  # :title ::
  #   (ChartTitle) 
  # :line ::
  #   (ChartLine) 
  # :fill ::
  #   (ChartFill) 
  # :pattern ::
  #   (ChartPattern) 
  # :marker ::
  #   (ChartMarker) 
  # :points ::
  #   (ChartPoint) 
  # :point_count ::
  #   (Integer) 
  # :smooth ::
  #   (Integer) 
  # :invert_if_negative ::
  #   (Integer) 
  # :has_labels ::
  #   (Integer) Data label parameters.
  # :show_labels_value ::
  #   (Integer) 
  # :show_labels_category ::
  #   (Integer) 
  # :show_labels_name ::
  #   (Integer) 
  # :show_labels_leader ::
  #   (Integer) 
  # :show_labels_legend ::
  #   (Integer) 
  # :show_labels_percent ::
  #   (Integer) 
  # :label_position ::
  #   (Integer) 
  # :label_separator ::
  #   (Integer) 
  # :default_label_position ::
  #   (Integer) 
  # :label_num_format ::
  #   (String) 
  # :label_font ::
  #   (ChartFont) 
  # :x_error_bars ::
  #   (SeriesErrorBars) 
  # :y_error_bars ::
  #   (SeriesErrorBars) 
  # :has_trendline ::
  #   (Integer) 
  # :has_trendline_forecast ::
  #   (Integer) 
  # :has_trendline_equation ::
  #   (Integer) 
  # :has_trendline_r_squared ::
  #   (Integer) 
  # :has_trendline_intercept ::
  #   (Integer) 
  # :trendline_type ::
  #   (Integer) 
  # :trendline_value ::
  #   (Integer) 
  # :trendline_forward ::
  #   (Float) 
  # :trendline_backward ::
  #   (Float) 
  # :trendline_value_type ::
  #   (Integer) 
  # :trendline_name ::
  #   (String) 
  # :trendline_line ::
  #   (ChartLine) 
  # :trendline_intercept ::
  #   (Float) 
  # :list_pointers ::
  #   (ChartSeriesListPointers) 
  module ChartSeriesWrappers
    # @param [String] sheetname 
    # @param [Integer] first_row 
    # @param [Integer] first_col 
    # @param [Integer] last_row 
    # @param [Integer] last_col 
    # @return [nil] 
    def set_categories(sheetname, first_row, first_col, last_row, last_col)
      Libxlsxwriter.chart_series_set_categories(self, sheetname, first_row, first_col, last_row, last_col)
    end
    
    # @param [String] sheetname 
    # @param [Integer] first_row 
    # @param [Integer] first_col 
    # @param [Integer] last_row 
    # @param [Integer] last_col 
    # @return [nil] 
    def set_values(sheetname, first_row, first_col, last_row, last_col)
      Libxlsxwriter.chart_series_set_values(self, sheetname, first_row, first_col, last_row, last_col)
    end
    
    # @param [String] name 
    # @return [nil] 
    def set_name(name)
      Libxlsxwriter.chart_series_set_name(self, name)
    end
    
    # @param [String] sheetname 
    # @param [Integer] row 
    # @param [Integer] col 
    # @return [nil] 
    def set_name_range(sheetname, row, col)
      Libxlsxwriter.chart_series_set_name_range(self, sheetname, row, col)
    end
    
    # @param [ChartLine] line 
    # @return [nil] 
    def set_line(line)
      Libxlsxwriter.chart_series_set_line(self, line)
    end
    
    # @param [ChartFill] fill 
    # @return [nil] 
    def set_fill(fill)
      Libxlsxwriter.chart_series_set_fill(self, fill)
    end
    
    # @return [nil] 
    def set_invert_if_negative()
      Libxlsxwriter.chart_series_set_invert_if_negative(self)
    end
    
    # @param [ChartPattern] pattern 
    # @return [nil] 
    def set_pattern(pattern)
      Libxlsxwriter.chart_series_set_pattern(self, pattern)
    end
    
    # @param [Integer] type 
    # @return [nil] 
    def set_marker_type(type)
      Libxlsxwriter.chart_series_set_marker_type(self, type)
    end
    
    # @param [Integer] size 
    # @return [nil] 
    def set_marker_size(size)
      Libxlsxwriter.chart_series_set_marker_size(self, size)
    end
    
    # @param [ChartLine] line 
    # @return [nil] 
    def set_marker_line(line)
      Libxlsxwriter.chart_series_set_marker_line(self, line)
    end
    
    # @param [ChartFill] fill 
    # @return [nil] 
    def set_marker_fill(fill)
      Libxlsxwriter.chart_series_set_marker_fill(self, fill)
    end
    
    # @param [ChartPattern] pattern 
    # @return [nil] 
    def set_marker_pattern(pattern)
      Libxlsxwriter.chart_series_set_marker_pattern(self, pattern)
    end
    
    # @param [FFI::Pointer(*ChartPoint)] points 
    # @return [Symbol from _enum_error_] 
    def set_points(points)
      Libxlsxwriter.chart_series_set_points(self, points)
    end
    
    # @param [Integer] smooth 
    # @return [nil] 
    def set_smooth(smooth)
      Libxlsxwriter.chart_series_set_smooth(self, smooth)
    end
    
    # @return [nil] 
    def set_labels()
      Libxlsxwriter.chart_series_set_labels(self)
    end
    
    # @param [Integer] show_name 
    # @param [Integer] show_category 
    # @param [Integer] show_value 
    # @return [nil] 
    def set_labels_options(show_name, show_category, show_value)
      Libxlsxwriter.chart_series_set_labels_options(self, show_name, show_category, show_value)
    end
    
    # @param [Integer] separator 
    # @return [nil] 
    def set_labels_separator(separator)
      Libxlsxwriter.chart_series_set_labels_separator(self, separator)
    end
    
    # @param [Integer] position 
    # @return [nil] 
    def set_labels_position(position)
      Libxlsxwriter.chart_series_set_labels_position(self, position)
    end
    
    # @return [nil] 
    def set_labels_leader_line()
      Libxlsxwriter.chart_series_set_labels_leader_line(self)
    end
    
    # @return [nil] 
    def set_labels_legend()
      Libxlsxwriter.chart_series_set_labels_legend(self)
    end
    
    # @return [nil] 
    def set_labels_percentage()
      Libxlsxwriter.chart_series_set_labels_percentage(self)
    end
    
    # @param [String] num_format 
    # @return [nil] 
    def set_labels_num_format(num_format)
      Libxlsxwriter.chart_series_set_labels_num_format(self, num_format)
    end
    
    # @param [ChartFont] font 
    # @return [nil] 
    def set_labels_font(font)
      Libxlsxwriter.chart_series_set_labels_font(self, font)
    end
    
    # @param [Integer] type 
    # @param [Integer] value 
    # @return [nil] 
    def set_trendline(type, value)
      Libxlsxwriter.chart_series_set_trendline(self, type, value)
    end
    
    # @param [Float] forward 
    # @param [Float] backward 
    # @return [nil] 
    def set_trendline_forecast(forward, backward)
      Libxlsxwriter.chart_series_set_trendline_forecast(self, forward, backward)
    end
    
    # @return [nil] 
    def set_trendline_equation()
      Libxlsxwriter.chart_series_set_trendline_equation(self)
    end
    
    # @return [nil] 
    def set_trendline_r_squared()
      Libxlsxwriter.chart_series_set_trendline_r_squared(self)
    end
    
    # @param [Float] intercept 
    # @return [nil] 
    def set_trendline_intercept(intercept)
      Libxlsxwriter.chart_series_set_trendline_intercept(self, intercept)
    end
    
    # @param [String] name 
    # @return [nil] 
    def set_trendline_name(name)
      Libxlsxwriter.chart_series_set_trendline_name(self, name)
    end
    
    # @param [ChartLine] line 
    # @return [nil] 
    def set_trendline_line(line)
      Libxlsxwriter.chart_series_set_trendline_line(self, line)
    end
    
    # @param [Symbol from _enum_chart_error_bar_axis_] axis_type 
    # @return [SeriesErrorBars] 
    def get_error_bars(axis_type)
      SeriesErrorBars.new Libxlsxwriter.chart_series_get_error_bars(self, axis_type)
    end
  end
  
  class ChartSeries < FFI::Struct
    include ChartSeriesWrappers
    layout :categories, SeriesRange,
           :values, SeriesRange,
           :title, ChartTitle.by_value,
           :line, ChartLine,
           :fill, ChartFill,
           :pattern, ChartPattern,
           :marker, ChartMarker,
           :points, ChartPoint,
           :point_count, :ushort,
           :smooth, :uchar,
           :invert_if_negative, :uchar,
           :has_labels, :uchar,
           :show_labels_value, :uchar,
           :show_labels_category, :uchar,
           :show_labels_name, :uchar,
           :show_labels_leader, :uchar,
           :show_labels_legend, :uchar,
           :show_labels_percent, :uchar,
           :label_position, :uchar,
           :label_separator, :uchar,
           :default_label_position, :uchar,
           :label_num_format, :string,
           :label_font, ChartFont,
           :x_error_bars, SeriesErrorBars,
           :y_error_bars, SeriesErrorBars,
           :has_trendline, :uchar,
           :has_trendline_forecast, :uchar,
           :has_trendline_equation, :uchar,
           :has_trendline_r_squared, :uchar,
           :has_trendline_intercept, :uchar,
           :trendline_type, :uchar,
           :trendline_value, :uchar,
           :trendline_forward, :double,
           :trendline_backward, :double,
           :trendline_value_type, :uchar,
           :trendline_name, :string,
           :trendline_line, ChartLine,
           :trendline_intercept, :double,
           :list_pointers, ChartSeriesListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :visible ::
  #   (Integer) 
  # :line ::
  #   (ChartLine) 
  class ChartGridline < FFI::Struct
    layout :visible, :uchar,
           :line, ChartLine
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :title ::
  #   (ChartTitle) 
  # :num_format ::
  #   (String) 
  # :default_num_format ::
  #   (String) 
  # :source_linked ::
  #   (Integer) 
  # :major_tick_mark ::
  #   (Integer) 
  # :minor_tick_mark ::
  #   (Integer) 
  # :is_horizontal ::
  #   (Integer) 
  # :major_gridlines ::
  #   (ChartGridline) 
  # :minor_gridlines ::
  #   (ChartGridline) 
  # :num_font ::
  #   (ChartFont) 
  # :line ::
  #   (ChartLine) 
  # :fill ::
  #   (ChartFill) 
  # :pattern ::
  #   (ChartPattern) 
  # :is_category ::
  #   (Integer) 
  # :is_date ::
  #   (Integer) 
  # :is_value ::
  #   (Integer) 
  # :axis_position ::
  #   (Integer) 
  # :position_axis ::
  #   (Integer) 
  # :label_position ::
  #   (Integer) 
  # :hidden ::
  #   (Integer) 
  # :reverse ::
  #   (Integer) 
  # :has_min ::
  #   (Integer) 
  # :min ::
  #   (Float) 
  # :has_max ::
  #   (Integer) 
  # :max ::
  #   (Float) 
  # :has_major_unit ::
  #   (Integer) 
  # :major_unit ::
  #   (Float) 
  # :has_minor_unit ::
  #   (Integer) 
  # :minor_unit ::
  #   (Float) 
  # :interval_unit ::
  #   (Integer) 
  # :interval_tick ::
  #   (Integer) 
  # :log_base ::
  #   (Integer) 
  # :display_units ::
  #   (Integer) 
  # :display_units_visible ::
  #   (Integer) 
  # :has_crossing ::
  #   (Integer) 
  # :crossing_max ::
  #   (Integer) 
  # :crossing ::
  #   (Float) 
  module ChartAxisWrappers
    # @param [String] name 
    # @return [nil] 
    def set_name(name)
      Libxlsxwriter.chart_axis_set_name(self, name)
    end
    
    # @param [String] sheetname 
    # @param [Integer] row 
    # @param [Integer] col 
    # @return [nil] 
    def set_name_range(sheetname, row, col)
      Libxlsxwriter.chart_axis_set_name_range(self, sheetname, row, col)
    end
    
    # @param [ChartFont] font 
    # @return [nil] 
    def set_name_font(font)
      Libxlsxwriter.chart_axis_set_name_font(self, font)
    end
    
    # @param [ChartFont] font 
    # @return [nil] 
    def set_num_font(font)
      Libxlsxwriter.chart_axis_set_num_font(self, font)
    end
    
    # @param [String] num_format 
    # @return [nil] 
    def set_num_format(num_format)
      Libxlsxwriter.chart_axis_set_num_format(self, num_format)
    end
    
    # @param [ChartLine] line 
    # @return [nil] 
    def set_line(line)
      Libxlsxwriter.chart_axis_set_line(self, line)
    end
    
    # @param [ChartFill] fill 
    # @return [nil] 
    def set_fill(fill)
      Libxlsxwriter.chart_axis_set_fill(self, fill)
    end
    
    # @param [ChartPattern] pattern 
    # @return [nil] 
    def set_pattern(pattern)
      Libxlsxwriter.chart_axis_set_pattern(self, pattern)
    end
    
    # @return [nil] 
    def set_reverse()
      Libxlsxwriter.chart_axis_set_reverse(self)
    end
    
    # @param [Float] value 
    # @return [nil] 
    def set_crossing(value)
      Libxlsxwriter.chart_axis_set_crossing(self, value)
    end
    
    # @return [nil] 
    def set_crossing_max()
      Libxlsxwriter.chart_axis_set_crossing_max(self)
    end
    
    # @return [nil] 
    def off()
      Libxlsxwriter.chart_axis_off(self)
    end
    
    # @param [Integer] position 
    # @return [nil] 
    def set_position(position)
      Libxlsxwriter.chart_axis_set_position(self, position)
    end
    
    # @param [Integer] position 
    # @return [nil] 
    def set_label_position(position)
      Libxlsxwriter.chart_axis_set_label_position(self, position)
    end
    
    # @param [Float] min 
    # @return [nil] 
    def set_min(min)
      Libxlsxwriter.chart_axis_set_min(self, min)
    end
    
    # @param [Float] max 
    # @return [nil] 
    def set_max(max)
      Libxlsxwriter.chart_axis_set_max(self, max)
    end
    
    # @param [Integer] log_base 
    # @return [nil] 
    def set_log_base(log_base)
      Libxlsxwriter.chart_axis_set_log_base(self, log_base)
    end
    
    # @param [Integer] type 
    # @return [nil] 
    def set_major_tick_mark(type)
      Libxlsxwriter.chart_axis_set_major_tick_mark(self, type)
    end
    
    # @param [Integer] type 
    # @return [nil] 
    def set_minor_tick_mark(type)
      Libxlsxwriter.chart_axis_set_minor_tick_mark(self, type)
    end
    
    # @param [Integer] unit 
    # @return [nil] 
    def set_interval_unit(unit)
      Libxlsxwriter.chart_axis_set_interval_unit(self, unit)
    end
    
    # @param [Integer] unit 
    # @return [nil] 
    def set_interval_tick(unit)
      Libxlsxwriter.chart_axis_set_interval_tick(self, unit)
    end
    
    # @param [Float] unit 
    # @return [nil] 
    def set_major_unit(unit)
      Libxlsxwriter.chart_axis_set_major_unit(self, unit)
    end
    
    # @param [Float] unit 
    # @return [nil] 
    def set_minor_unit(unit)
      Libxlsxwriter.chart_axis_set_minor_unit(self, unit)
    end
    
    # @param [Integer] units 
    # @return [nil] 
    def set_display_units(units)
      Libxlsxwriter.chart_axis_set_display_units(self, units)
    end
    
    # @param [Integer] visible 
    # @return [nil] 
    def set_display_units_visible(visible)
      Libxlsxwriter.chart_axis_set_display_units_visible(self, visible)
    end
    
    # @param [Integer] visible 
    # @return [nil] 
    def major_gridlines_set_visible(visible)
      Libxlsxwriter.chart_axis_major_gridlines_set_visible(self, visible)
    end
    
    # @param [Integer] visible 
    # @return [nil] 
    def minor_gridlines_set_visible(visible)
      Libxlsxwriter.chart_axis_minor_gridlines_set_visible(self, visible)
    end
    
    # @param [ChartLine] line 
    # @return [nil] 
    def major_gridlines_set_line(line)
      Libxlsxwriter.chart_axis_major_gridlines_set_line(self, line)
    end
    
    # @param [ChartLine] line 
    # @return [nil] 
    def minor_gridlines_set_line(line)
      Libxlsxwriter.chart_axis_minor_gridlines_set_line(self, line)
    end
  end
  
  class ChartAxis < FFI::Struct
    include ChartAxisWrappers
    layout :title, ChartTitle.by_value,
           :num_format, :string,
           :default_num_format, :string,
           :source_linked, :uchar,
           :major_tick_mark, :uchar,
           :minor_tick_mark, :uchar,
           :is_horizontal, :uchar,
           :major_gridlines, ChartGridline.by_value,
           :minor_gridlines, ChartGridline.by_value,
           :num_font, ChartFont,
           :line, ChartLine,
           :fill, ChartFill,
           :pattern, ChartPattern,
           :is_category, :uchar,
           :is_date, :uchar,
           :is_value, :uchar,
           :axis_position, :uchar,
           :position_axis, :uchar,
           :label_position, :uchar,
           :hidden, :uchar,
           :reverse, :uchar,
           :has_min, :uchar,
           :min, :double,
           :has_max, :uchar,
           :max, :double,
           :has_major_unit, :uchar,
           :major_unit, :double,
           :has_minor_unit, :uchar,
           :minor_unit, :double,
           :interval_unit, :ushort,
           :interval_tick, :ushort,
           :log_base, :ushort,
           :display_units, :uchar,
           :display_units_visible, :uchar,
           :has_crossing, :uchar,
           :crossing_max, :uchar,
           :crossing, :double
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*Chart)) 
  class ChartOrderedListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*Chart)) 
  class ChartListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :type ::
  #   (Integer) 
  # :subtype ::
  #   (Integer) 
  # :series_index ::
  #   (Integer) 
  # :write_chart_type ::
  #   (FFI::Pointer(*)) 
  # :write_plot_area ::
  #   (FFI::Pointer(*)) 
  # :x_axis ::
  #   (ChartAxis) A pointer to the chart x_axis object which can be used in functions
  #   that configures the X axis.
  # :y_axis ::
  #   (ChartAxis) A pointer to the chart y_axis object which can be used in functions
  #   that configures the Y axis.
  # :title ::
  #   (ChartTitle) 
  # :id ::
  #   (Integer) 
  # :axis_id_1 ::
  #   (Integer) 
  # :axis_id_2 ::
  #   (Integer) 
  # :axis_id_3 ::
  #   (Integer) 
  # :axis_id_4 ::
  #   (Integer) 
  # :in_use ::
  #   (Integer) 
  # :chart_group ::
  #   (Integer) 
  # :cat_has_num_fmt ::
  #   (Integer) 
  # :has_horiz_cat_axis ::
  #   (Integer) 
  # :has_horiz_val_axis ::
  #   (Integer) 
  # :style_id ::
  #   (Integer) 
  # :rotation ::
  #   (Integer) 
  # :hole_size ::
  #   (Integer) 
  # :no_title ::
  #   (Integer) 
  # :has_overlap ::
  #   (Integer) 
  # :overlap_y1 ::
  #   (Integer) 
  # :overlap_y2 ::
  #   (Integer) 
  # :gap_y1 ::
  #   (Integer) 
  # :gap_y2 ::
  #   (Integer) 
  # :grouping ::
  #   (Integer) 
  # :default_cross_between ::
  #   (Integer) 
  # :legend ::
  #   (ChartLegend) 
  # :delete_series ::
  #   (FFI::Pointer(*Int16T)) 
  # :delete_series_count ::
  #   (Integer) 
  # :default_marker ::
  #   (ChartMarker) 
  # :chartarea_line ::
  #   (ChartLine) 
  # :chartarea_fill ::
  #   (ChartFill) 
  # :chartarea_pattern ::
  #   (ChartPattern) 
  # :plotarea_line ::
  #   (ChartLine) 
  # :plotarea_fill ::
  #   (ChartFill) 
  # :plotarea_pattern ::
  #   (ChartPattern) 
  # :has_drop_lines ::
  #   (Integer) 
  # :drop_lines_line ::
  #   (ChartLine) 
  # :has_high_low_lines ::
  #   (Integer) 
  # :high_low_lines_line ::
  #   (ChartLine) 
  # :series_list ::
  #   (ChartSeriesList) 
  # :has_table ::
  #   (Integer) 
  # :has_table_vertical ::
  #   (Integer) 
  # :has_table_horizontal ::
  #   (Integer) 
  # :has_table_outline ::
  #   (Integer) 
  # :has_table_legend_keys ::
  #   (Integer) 
  # :table_font ::
  #   (ChartFont) 
  # :show_blanks_as ::
  #   (Integer) 
  # :show_hidden_data ::
  #   (Integer) 
  # :has_up_down_bars ::
  #   (Integer) 
  # :up_bar_line ::
  #   (ChartLine) 
  # :down_bar_line ::
  #   (ChartLine) 
  # :up_bar_fill ::
  #   (ChartFill) 
  # :down_bar_fill ::
  #   (ChartFill) 
  # :default_label_position ::
  #   (Integer) 
  # :ordered_list_pointers ::
  #   (ChartOrderedListPointers) 
  # :list_pointers ::
  #   (ChartListPointers) 
  module ChartWrappers
    # @return [nil] 
    def free()
      Libxlsxwriter.chart_free(self)
    end
    
    # @return [nil] 
    def assemble_xml_file()
      Libxlsxwriter.chart_assemble_xml_file(self)
    end
    
    # @param [String] categories 
    # @param [String] values 
    # @return [ChartSeries] 
    def add_series(categories, values)
      ChartSeries.new Libxlsxwriter.chart_add_series(self, categories, values)
    end
    
    # @param [Symbol from _enum_chart_axis_type_] axis_type 
    # @return [ChartAxis] 
    def axis_get(axis_type)
      ChartAxis.new Libxlsxwriter.chart_axis_get(self, axis_type)
    end
    
    # @param [String] name 
    # @return [nil] 
    def title_set_name(name)
      Libxlsxwriter.chart_title_set_name(self, name)
    end
    
    # @param [String] sheetname 
    # @param [Integer] row 
    # @param [Integer] col 
    # @return [nil] 
    def title_set_name_range(sheetname, row, col)
      Libxlsxwriter.chart_title_set_name_range(self, sheetname, row, col)
    end
    
    # @param [ChartFont] font 
    # @return [nil] 
    def title_set_name_font(font)
      Libxlsxwriter.chart_title_set_name_font(self, font)
    end
    
    # @return [nil] 
    def title_off()
      Libxlsxwriter.chart_title_off(self)
    end
    
    # @param [Integer] position 
    # @return [nil] 
    def legend_set_position(position)
      Libxlsxwriter.chart_legend_set_position(self, position)
    end
    
    # @param [ChartFont] font 
    # @return [nil] 
    def legend_set_font(font)
      Libxlsxwriter.chart_legend_set_font(self, font)
    end
    
    # @param [FFI::Pointer(*Short)] delete_series 
    # @return [Symbol from _enum_error_] 
    def legend_delete_series(delete_series)
      Libxlsxwriter.chart_legend_delete_series(self, delete_series)
    end
    
    # @param [ChartLine] line 
    # @return [nil] 
    def chartarea_set_line(line)
      Libxlsxwriter.chart_chartarea_set_line(self, line)
    end
    
    # @param [ChartFill] fill 
    # @return [nil] 
    def chartarea_set_fill(fill)
      Libxlsxwriter.chart_chartarea_set_fill(self, fill)
    end
    
    # @param [ChartPattern] pattern 
    # @return [nil] 
    def chartarea_set_pattern(pattern)
      Libxlsxwriter.chart_chartarea_set_pattern(self, pattern)
    end
    
    # @param [ChartLine] line 
    # @return [nil] 
    def plotarea_set_line(line)
      Libxlsxwriter.chart_plotarea_set_line(self, line)
    end
    
    # @param [ChartFill] fill 
    # @return [nil] 
    def plotarea_set_fill(fill)
      Libxlsxwriter.chart_plotarea_set_fill(self, fill)
    end
    
    # @param [ChartPattern] pattern 
    # @return [nil] 
    def plotarea_set_pattern(pattern)
      Libxlsxwriter.chart_plotarea_set_pattern(self, pattern)
    end
    
    # @param [Integer] style_id 
    # @return [nil] 
    def set_style(style_id)
      Libxlsxwriter.chart_set_style(self, style_id)
    end
    
    # @return [nil] 
    def set_table()
      Libxlsxwriter.chart_set_table(self)
    end
    
    # @param [Integer] horizontal 
    # @param [Integer] vertical 
    # @param [Integer] outline 
    # @param [Integer] legend_keys 
    # @return [nil] 
    def set_table_grid(horizontal, vertical, outline, legend_keys)
      Libxlsxwriter.chart_set_table_grid(self, horizontal, vertical, outline, legend_keys)
    end
    
    # @param [ChartFont] font 
    # @return [nil] 
    def set_table_font(font)
      Libxlsxwriter.chart_set_table_font(self, font)
    end
    
    # @return [nil] 
    def set_up_down_bars()
      Libxlsxwriter.chart_set_up_down_bars(self)
    end
    
    # @param [ChartLine] up_bar_line 
    # @param [ChartFill] up_bar_fill 
    # @param [ChartLine] down_bar_line 
    # @param [ChartFill] down_bar_fill 
    # @return [nil] 
    def set_up_down_bars_format(up_bar_line, up_bar_fill, down_bar_line, down_bar_fill)
      Libxlsxwriter.chart_set_up_down_bars_format(self, up_bar_line, up_bar_fill, down_bar_line, down_bar_fill)
    end
    
    # @param [ChartLine] line 
    # @return [nil] 
    def set_drop_lines(line)
      Libxlsxwriter.chart_set_drop_lines(self, line)
    end
    
    # @param [ChartLine] line 
    # @return [nil] 
    def set_high_low_lines(line)
      Libxlsxwriter.chart_set_high_low_lines(self, line)
    end
    
    # @param [Integer] overlap 
    # @return [nil] 
    def set_series_overlap(overlap)
      Libxlsxwriter.chart_set_series_overlap(self, overlap)
    end
    
    # @param [Integer] gap 
    # @return [nil] 
    def set_series_gap(gap)
      Libxlsxwriter.chart_set_series_gap(self, gap)
    end
    
    # @param [Integer] option 
    # @return [nil] 
    def show_blanks_as(option)
      Libxlsxwriter.chart_show_blanks_as(self, option)
    end
    
    # @return [nil] 
    def show_hidden_data()
      Libxlsxwriter.chart_show_hidden_data(self)
    end
    
    # @param [Integer] rotation 
    # @return [nil] 
    def set_rotation(rotation)
      Libxlsxwriter.chart_set_rotation(self, rotation)
    end
    
    # @param [Integer] size 
    # @return [nil] 
    def set_hole_size(size)
      Libxlsxwriter.chart_set_hole_size(self, size)
    end
  end
  
  class Chart < FFI::Struct
    include ChartWrappers
    layout :file, :pointer,
           :type, :uchar,
           :subtype, :uchar,
           :series_index, :ushort,
           :write_chart_type, :pointer,
           :write_plot_area, :pointer,
           :x_axis, ChartAxis,
           :y_axis, ChartAxis,
           :title, ChartTitle.by_value,
           :id, :uint,
           :axis_id_1, :uint,
           :axis_id_2, :uint,
           :axis_id_3, :uint,
           :axis_id_4, :uint,
           :in_use, :uchar,
           :chart_group, :uchar,
           :cat_has_num_fmt, :uchar,
           :has_horiz_cat_axis, :uchar,
           :has_horiz_val_axis, :uchar,
           :style_id, :uchar,
           :rotation, :ushort,
           :hole_size, :ushort,
           :no_title, :uchar,
           :has_overlap, :uchar,
           :overlap_y1, :char,
           :overlap_y2, :char,
           :gap_y1, :ushort,
           :gap_y2, :ushort,
           :grouping, :uchar,
           :default_cross_between, :uchar,
           :legend, ChartLegend.by_value,
           :delete_series, :pointer,
           :delete_series_count, :ushort,
           :default_marker, ChartMarker,
           :chartarea_line, ChartLine,
           :chartarea_fill, ChartFill,
           :chartarea_pattern, ChartPattern,
           :plotarea_line, ChartLine,
           :plotarea_fill, ChartFill,
           :plotarea_pattern, ChartPattern,
           :has_drop_lines, :uchar,
           :drop_lines_line, ChartLine,
           :has_high_low_lines, :uchar,
           :high_low_lines_line, ChartLine,
           :series_list, ChartSeriesList,
           :has_table, :uchar,
           :has_table_vertical, :uchar,
           :has_table_horizontal, :uchar,
           :has_table_outline, :uchar,
           :has_table_legend_keys, :uchar,
           :table_font, ChartFont,
           :show_blanks_as, :uchar,
           :show_hidden_data, :uchar,
           :has_up_down_bars, :uchar,
           :up_bar_line, ChartLine,
           :down_bar_line, ChartLine,
           :up_bar_fill, ChartFill,
           :down_bar_fill, ChartFill,
           :default_label_position, :uchar,
           :ordered_list_pointers, ChartOrderedListPointers.by_value,
           :list_pointers, ChartListPointers.by_value
  end
  
  # (Not documented)
  # 
  # @method chart_new(type)
  # @param [Integer] type 
  # @return [Chart] 
  # @scope class
  attach_function :chart_new, :lxw_chart_new, [:uchar], Chart
  
  # (Not documented)
  # 
  # @method chart_free(chart)
  # @param [Chart] chart 
  # @return [nil] 
  # @scope class
  attach_function :chart_free, :lxw_chart_free, [Chart], :void
  
  # (Not documented)
  # 
  # @method chart_assemble_xml_file(chart)
  # @param [Chart] chart 
  # @return [nil] 
  # @scope class
  attach_function :chart_assemble_xml_file, :lxw_chart_assemble_xml_file, [Chart], :void
  
  # (Not documented)
  # 
  # @method chart_add_series(chart, categories, values)
  # @param [Chart] chart 
  # @param [String] categories 
  # @param [String] values 
  # @return [ChartSeries] 
  # @scope class
  attach_function :chart_add_series, :chart_add_series, [Chart, :string, :string], ChartSeries
  
  # (Not documented)
  # 
  # @method chart_series_set_categories(series, sheetname, first_row, first_col, last_row, last_col)
  # @param [ChartSeries] series 
  # @param [String] sheetname 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] last_row 
  # @param [Integer] last_col 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_categories, :chart_series_set_categories, [ChartSeries, :string, :uint, :ushort, :uint, :ushort], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_values(series, sheetname, first_row, first_col, last_row, last_col)
  # @param [ChartSeries] series 
  # @param [String] sheetname 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] last_row 
  # @param [Integer] last_col 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_values, :chart_series_set_values, [ChartSeries, :string, :uint, :ushort, :uint, :ushort], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_name(series, name)
  # @param [ChartSeries] series 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_name, :chart_series_set_name, [ChartSeries, :string], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_name_range(series, sheetname, row, col)
  # @param [ChartSeries] series 
  # @param [String] sheetname 
  # @param [Integer] row 
  # @param [Integer] col 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_name_range, :chart_series_set_name_range, [ChartSeries, :string, :uint, :ushort], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_line(series, line)
  # @param [ChartSeries] series 
  # @param [ChartLine] line 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_line, :chart_series_set_line, [ChartSeries, ChartLine], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_fill(series, fill)
  # @param [ChartSeries] series 
  # @param [ChartFill] fill 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_fill, :chart_series_set_fill, [ChartSeries, ChartFill], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_invert_if_negative(series)
  # @param [ChartSeries] series 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_invert_if_negative, :chart_series_set_invert_if_negative, [ChartSeries], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_pattern(series, pattern)
  # @param [ChartSeries] series 
  # @param [ChartPattern] pattern 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_pattern, :chart_series_set_pattern, [ChartSeries, ChartPattern], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_marker_type(series, type)
  # @param [ChartSeries] series 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_marker_type, :chart_series_set_marker_type, [ChartSeries, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_marker_size(series, size)
  # @param [ChartSeries] series 
  # @param [Integer] size 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_marker_size, :chart_series_set_marker_size, [ChartSeries, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_marker_line(series, line)
  # @param [ChartSeries] series 
  # @param [ChartLine] line 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_marker_line, :chart_series_set_marker_line, [ChartSeries, ChartLine], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_marker_fill(series, fill)
  # @param [ChartSeries] series 
  # @param [ChartFill] fill 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_marker_fill, :chart_series_set_marker_fill, [ChartSeries, ChartFill], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_marker_pattern(series, pattern)
  # @param [ChartSeries] series 
  # @param [ChartPattern] pattern 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_marker_pattern, :chart_series_set_marker_pattern, [ChartSeries, ChartPattern], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_points(series, points)
  # @param [ChartSeries] series 
  # @param [FFI::Pointer(*ChartPoint)] points 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :chart_series_set_points, :chart_series_set_points, [ChartSeries, :pointer], :error
  
  # (Not documented)
  # 
  # @method chart_series_set_smooth(series, smooth)
  # @param [ChartSeries] series 
  # @param [Integer] smooth 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_smooth, :chart_series_set_smooth, [ChartSeries, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_labels(series)
  # @param [ChartSeries] series 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_labels, :chart_series_set_labels, [ChartSeries], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_labels_options(series, show_name, show_category, show_value)
  # @param [ChartSeries] series 
  # @param [Integer] show_name 
  # @param [Integer] show_category 
  # @param [Integer] show_value 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_labels_options, :chart_series_set_labels_options, [ChartSeries, :uchar, :uchar, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_labels_separator(series, separator)
  # @param [ChartSeries] series 
  # @param [Integer] separator 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_labels_separator, :chart_series_set_labels_separator, [ChartSeries, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_labels_position(series, position)
  # @param [ChartSeries] series 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_labels_position, :chart_series_set_labels_position, [ChartSeries, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_labels_leader_line(series)
  # @param [ChartSeries] series 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_labels_leader_line, :chart_series_set_labels_leader_line, [ChartSeries], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_labels_legend(series)
  # @param [ChartSeries] series 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_labels_legend, :chart_series_set_labels_legend, [ChartSeries], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_labels_percentage(series)
  # @param [ChartSeries] series 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_labels_percentage, :chart_series_set_labels_percentage, [ChartSeries], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_labels_num_format(series, num_format)
  # @param [ChartSeries] series 
  # @param [String] num_format 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_labels_num_format, :chart_series_set_labels_num_format, [ChartSeries, :string], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_labels_font(series, font)
  # @param [ChartSeries] series 
  # @param [ChartFont] font 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_labels_font, :chart_series_set_labels_font, [ChartSeries, ChartFont], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_trendline(series, type, value)
  # @param [ChartSeries] series 
  # @param [Integer] type 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_trendline, :chart_series_set_trendline, [ChartSeries, :uchar, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_trendline_forecast(series, forward, backward)
  # @param [ChartSeries] series 
  # @param [Float] forward 
  # @param [Float] backward 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_trendline_forecast, :chart_series_set_trendline_forecast, [ChartSeries, :double, :double], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_trendline_equation(series)
  # @param [ChartSeries] series 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_trendline_equation, :chart_series_set_trendline_equation, [ChartSeries], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_trendline_r_squared(series)
  # @param [ChartSeries] series 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_trendline_r_squared, :chart_series_set_trendline_r_squared, [ChartSeries], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_trendline_intercept(series, intercept)
  # @param [ChartSeries] series 
  # @param [Float] intercept 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_trendline_intercept, :chart_series_set_trendline_intercept, [ChartSeries, :double], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_trendline_name(series, name)
  # @param [ChartSeries] series 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_trendline_name, :chart_series_set_trendline_name, [ChartSeries, :string], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_trendline_line(series, line)
  # @param [ChartSeries] series 
  # @param [ChartLine] line 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_trendline_line, :chart_series_set_trendline_line, [ChartSeries, ChartLine], :void
  
  # (Not documented)
  # 
  # @method chart_series_get_error_bars(series, axis_type)
  # @param [ChartSeries] series 
  # @param [Symbol from _enum_chart_error_bar_axis_] axis_type 
  # @return [SeriesErrorBars] 
  # @scope class
  attach_function :chart_series_get_error_bars, :chart_series_get_error_bars, [ChartSeries, :chart_error_bar_axis], SeriesErrorBars
  
  # (Not documented)
  # 
  # @method chart_series_set_error_bars(error_bars, type, value)
  # @param [SeriesErrorBars] error_bars 
  # @param [Integer] type 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_error_bars, :chart_series_set_error_bars, [SeriesErrorBars, :uchar, :double], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_error_bars_direction(error_bars, direction)
  # @param [SeriesErrorBars] error_bars 
  # @param [Integer] direction 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_error_bars_direction, :chart_series_set_error_bars_direction, [SeriesErrorBars, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_error_bars_endcap(error_bars, endcap)
  # @param [SeriesErrorBars] error_bars 
  # @param [Integer] endcap 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_error_bars_endcap, :chart_series_set_error_bars_endcap, [SeriesErrorBars, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_series_set_error_bars_line(error_bars, line)
  # @param [SeriesErrorBars] error_bars 
  # @param [ChartLine] line 
  # @return [nil] 
  # @scope class
  attach_function :chart_series_set_error_bars_line, :chart_series_set_error_bars_line, [SeriesErrorBars, ChartLine], :void
  
  # (Not documented)
  # 
  # @method chart_axis_get(chart, axis_type)
  # @param [Chart] chart 
  # @param [Symbol from _enum_chart_axis_type_] axis_type 
  # @return [ChartAxis] 
  # @scope class
  attach_function :chart_axis_get, :chart_axis_get, [Chart, :chart_axis_type], ChartAxis
  
  # (Not documented)
  # 
  # @method chart_axis_set_name(axis, name)
  # @param [ChartAxis] axis 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_name, :chart_axis_set_name, [ChartAxis, :string], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_name_range(axis, sheetname, row, col)
  # @param [ChartAxis] axis 
  # @param [String] sheetname 
  # @param [Integer] row 
  # @param [Integer] col 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_name_range, :chart_axis_set_name_range, [ChartAxis, :string, :uint, :ushort], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_name_font(axis, font)
  # @param [ChartAxis] axis 
  # @param [ChartFont] font 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_name_font, :chart_axis_set_name_font, [ChartAxis, ChartFont], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_num_font(axis, font)
  # @param [ChartAxis] axis 
  # @param [ChartFont] font 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_num_font, :chart_axis_set_num_font, [ChartAxis, ChartFont], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_num_format(axis, num_format)
  # @param [ChartAxis] axis 
  # @param [String] num_format 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_num_format, :chart_axis_set_num_format, [ChartAxis, :string], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_line(axis, line)
  # @param [ChartAxis] axis 
  # @param [ChartLine] line 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_line, :chart_axis_set_line, [ChartAxis, ChartLine], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_fill(axis, fill)
  # @param [ChartAxis] axis 
  # @param [ChartFill] fill 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_fill, :chart_axis_set_fill, [ChartAxis, ChartFill], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_pattern(axis, pattern)
  # @param [ChartAxis] axis 
  # @param [ChartPattern] pattern 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_pattern, :chart_axis_set_pattern, [ChartAxis, ChartPattern], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_reverse(axis)
  # @param [ChartAxis] axis 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_reverse, :chart_axis_set_reverse, [ChartAxis], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_crossing(axis, value)
  # @param [ChartAxis] axis 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_crossing, :chart_axis_set_crossing, [ChartAxis, :double], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_crossing_max(axis)
  # @param [ChartAxis] axis 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_crossing_max, :chart_axis_set_crossing_max, [ChartAxis], :void
  
  # (Not documented)
  # 
  # @method chart_axis_off(axis)
  # @param [ChartAxis] axis 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_off, :chart_axis_off, [ChartAxis], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_position(axis, position)
  # @param [ChartAxis] axis 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_position, :chart_axis_set_position, [ChartAxis, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_label_position(axis, position)
  # @param [ChartAxis] axis 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_label_position, :chart_axis_set_label_position, [ChartAxis, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_min(axis, min)
  # @param [ChartAxis] axis 
  # @param [Float] min 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_min, :chart_axis_set_min, [ChartAxis, :double], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_max(axis, max)
  # @param [ChartAxis] axis 
  # @param [Float] max 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_max, :chart_axis_set_max, [ChartAxis, :double], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_log_base(axis, log_base)
  # @param [ChartAxis] axis 
  # @param [Integer] log_base 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_log_base, :chart_axis_set_log_base, [ChartAxis, :ushort], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_major_tick_mark(axis, type)
  # @param [ChartAxis] axis 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_major_tick_mark, :chart_axis_set_major_tick_mark, [ChartAxis, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_minor_tick_mark(axis, type)
  # @param [ChartAxis] axis 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_minor_tick_mark, :chart_axis_set_minor_tick_mark, [ChartAxis, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_interval_unit(axis, unit)
  # @param [ChartAxis] axis 
  # @param [Integer] unit 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_interval_unit, :chart_axis_set_interval_unit, [ChartAxis, :ushort], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_interval_tick(axis, unit)
  # @param [ChartAxis] axis 
  # @param [Integer] unit 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_interval_tick, :chart_axis_set_interval_tick, [ChartAxis, :ushort], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_major_unit(axis, unit)
  # @param [ChartAxis] axis 
  # @param [Float] unit 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_major_unit, :chart_axis_set_major_unit, [ChartAxis, :double], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_minor_unit(axis, unit)
  # @param [ChartAxis] axis 
  # @param [Float] unit 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_minor_unit, :chart_axis_set_minor_unit, [ChartAxis, :double], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_display_units(axis, units)
  # @param [ChartAxis] axis 
  # @param [Integer] units 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_display_units, :chart_axis_set_display_units, [ChartAxis, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_axis_set_display_units_visible(axis, visible)
  # @param [ChartAxis] axis 
  # @param [Integer] visible 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_set_display_units_visible, :chart_axis_set_display_units_visible, [ChartAxis, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_axis_major_gridlines_set_visible(axis, visible)
  # @param [ChartAxis] axis 
  # @param [Integer] visible 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_major_gridlines_set_visible, :chart_axis_major_gridlines_set_visible, [ChartAxis, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_axis_minor_gridlines_set_visible(axis, visible)
  # @param [ChartAxis] axis 
  # @param [Integer] visible 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_minor_gridlines_set_visible, :chart_axis_minor_gridlines_set_visible, [ChartAxis, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_axis_major_gridlines_set_line(axis, line)
  # @param [ChartAxis] axis 
  # @param [ChartLine] line 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_major_gridlines_set_line, :chart_axis_major_gridlines_set_line, [ChartAxis, ChartLine], :void
  
  # (Not documented)
  # 
  # @method chart_axis_minor_gridlines_set_line(axis, line)
  # @param [ChartAxis] axis 
  # @param [ChartLine] line 
  # @return [nil] 
  # @scope class
  attach_function :chart_axis_minor_gridlines_set_line, :chart_axis_minor_gridlines_set_line, [ChartAxis, ChartLine], :void
  
  # (Not documented)
  # 
  # @method chart_title_set_name(chart, name)
  # @param [Chart] chart 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :chart_title_set_name, :chart_title_set_name, [Chart, :string], :void
  
  # (Not documented)
  # 
  # @method chart_title_set_name_range(chart, sheetname, row, col)
  # @param [Chart] chart 
  # @param [String] sheetname 
  # @param [Integer] row 
  # @param [Integer] col 
  # @return [nil] 
  # @scope class
  attach_function :chart_title_set_name_range, :chart_title_set_name_range, [Chart, :string, :uint, :ushort], :void
  
  # (Not documented)
  # 
  # @method chart_title_set_name_font(chart, font)
  # @param [Chart] chart 
  # @param [ChartFont] font 
  # @return [nil] 
  # @scope class
  attach_function :chart_title_set_name_font, :chart_title_set_name_font, [Chart, ChartFont], :void
  
  # (Not documented)
  # 
  # @method chart_title_off(chart)
  # @param [Chart] chart 
  # @return [nil] 
  # @scope class
  attach_function :chart_title_off, :chart_title_off, [Chart], :void
  
  # (Not documented)
  # 
  # @method chart_legend_set_position(chart, position)
  # @param [Chart] chart 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :chart_legend_set_position, :chart_legend_set_position, [Chart, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_legend_set_font(chart, font)
  # @param [Chart] chart 
  # @param [ChartFont] font 
  # @return [nil] 
  # @scope class
  attach_function :chart_legend_set_font, :chart_legend_set_font, [Chart, ChartFont], :void
  
  # (Not documented)
  # 
  # @method chart_legend_delete_series(chart, delete_series)
  # @param [Chart] chart 
  # @param [FFI::Pointer(*Short)] delete_series 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :chart_legend_delete_series, :chart_legend_delete_series, [Chart, :pointer], :error
  
  # (Not documented)
  # 
  # @method chart_chartarea_set_line(chart, line)
  # @param [Chart] chart 
  # @param [ChartLine] line 
  # @return [nil] 
  # @scope class
  attach_function :chart_chartarea_set_line, :chart_chartarea_set_line, [Chart, ChartLine], :void
  
  # (Not documented)
  # 
  # @method chart_chartarea_set_fill(chart, fill)
  # @param [Chart] chart 
  # @param [ChartFill] fill 
  # @return [nil] 
  # @scope class
  attach_function :chart_chartarea_set_fill, :chart_chartarea_set_fill, [Chart, ChartFill], :void
  
  # (Not documented)
  # 
  # @method chart_chartarea_set_pattern(chart, pattern)
  # @param [Chart] chart 
  # @param [ChartPattern] pattern 
  # @return [nil] 
  # @scope class
  attach_function :chart_chartarea_set_pattern, :chart_chartarea_set_pattern, [Chart, ChartPattern], :void
  
  # (Not documented)
  # 
  # @method chart_plotarea_set_line(chart, line)
  # @param [Chart] chart 
  # @param [ChartLine] line 
  # @return [nil] 
  # @scope class
  attach_function :chart_plotarea_set_line, :chart_plotarea_set_line, [Chart, ChartLine], :void
  
  # (Not documented)
  # 
  # @method chart_plotarea_set_fill(chart, fill)
  # @param [Chart] chart 
  # @param [ChartFill] fill 
  # @return [nil] 
  # @scope class
  attach_function :chart_plotarea_set_fill, :chart_plotarea_set_fill, [Chart, ChartFill], :void
  
  # (Not documented)
  # 
  # @method chart_plotarea_set_pattern(chart, pattern)
  # @param [Chart] chart 
  # @param [ChartPattern] pattern 
  # @return [nil] 
  # @scope class
  attach_function :chart_plotarea_set_pattern, :chart_plotarea_set_pattern, [Chart, ChartPattern], :void
  
  # (Not documented)
  # 
  # @method chart_set_style(chart, style_id)
  # @param [Chart] chart 
  # @param [Integer] style_id 
  # @return [nil] 
  # @scope class
  attach_function :chart_set_style, :chart_set_style, [Chart, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_set_table(chart)
  # @param [Chart] chart 
  # @return [nil] 
  # @scope class
  attach_function :chart_set_table, :chart_set_table, [Chart], :void
  
  # (Not documented)
  # 
  # @method chart_set_table_grid(chart, horizontal, vertical, outline, legend_keys)
  # @param [Chart] chart 
  # @param [Integer] horizontal 
  # @param [Integer] vertical 
  # @param [Integer] outline 
  # @param [Integer] legend_keys 
  # @return [nil] 
  # @scope class
  attach_function :chart_set_table_grid, :chart_set_table_grid, [Chart, :uchar, :uchar, :uchar, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_set_table_font(chart, font)
  # @param [Chart] chart 
  # @param [ChartFont] font 
  # @return [nil] 
  # @scope class
  attach_function :chart_set_table_font, :chart_set_table_font, [Chart, ChartFont], :void
  
  # (Not documented)
  # 
  # @method chart_set_up_down_bars(chart)
  # @param [Chart] chart 
  # @return [nil] 
  # @scope class
  attach_function :chart_set_up_down_bars, :chart_set_up_down_bars, [Chart], :void
  
  # (Not documented)
  # 
  # @method chart_set_up_down_bars_format(chart, up_bar_line, up_bar_fill, down_bar_line, down_bar_fill)
  # @param [Chart] chart 
  # @param [ChartLine] up_bar_line 
  # @param [ChartFill] up_bar_fill 
  # @param [ChartLine] down_bar_line 
  # @param [ChartFill] down_bar_fill 
  # @return [nil] 
  # @scope class
  attach_function :chart_set_up_down_bars_format, :chart_set_up_down_bars_format, [Chart, ChartLine, ChartFill, ChartLine, ChartFill], :void
  
  # (Not documented)
  # 
  # @method chart_set_drop_lines(chart, line)
  # @param [Chart] chart 
  # @param [ChartLine] line 
  # @return [nil] 
  # @scope class
  attach_function :chart_set_drop_lines, :chart_set_drop_lines, [Chart, ChartLine], :void
  
  # (Not documented)
  # 
  # @method chart_set_high_low_lines(chart, line)
  # @param [Chart] chart 
  # @param [ChartLine] line 
  # @return [nil] 
  # @scope class
  attach_function :chart_set_high_low_lines, :chart_set_high_low_lines, [Chart, ChartLine], :void
  
  # (Not documented)
  # 
  # @method chart_set_series_overlap(chart, overlap)
  # @param [Chart] chart 
  # @param [Integer] overlap 
  # @return [nil] 
  # @scope class
  attach_function :chart_set_series_overlap, :chart_set_series_overlap, [Chart, :char], :void
  
  # (Not documented)
  # 
  # @method chart_set_series_gap(chart, gap)
  # @param [Chart] chart 
  # @param [Integer] gap 
  # @return [nil] 
  # @scope class
  attach_function :chart_set_series_gap, :chart_set_series_gap, [Chart, :ushort], :void
  
  # (Not documented)
  # 
  # @method chart_show_blanks_as(chart, option)
  # @param [Chart] chart 
  # @param [Integer] option 
  # @return [nil] 
  # @scope class
  attach_function :chart_show_blanks_as, :chart_show_blanks_as, [Chart, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_show_hidden_data(chart)
  # @param [Chart] chart 
  # @return [nil] 
  # @scope class
  attach_function :chart_show_hidden_data, :chart_show_hidden_data, [Chart], :void
  
  # (Not documented)
  # 
  # @method chart_set_rotation(chart, rotation)
  # @param [Chart] chart 
  # @param [Integer] rotation 
  # @return [nil] 
  # @scope class
  attach_function :chart_set_rotation, :chart_set_rotation, [Chart, :ushort], :void
  
  # (Not documented)
  # 
  # @method chart_set_hole_size(chart, size)
  # @param [Chart] chart 
  # @param [Integer] size 
  # @return [nil] 
  # @scope class
  attach_function :chart_set_hole_size, :chart_set_hole_size, [Chart, :uchar], :void
  
  # (Not documented)
  # 
  # @method chart_add_data_cache(range, data, rows, cols, col)
  # @param [SeriesRange] range 
  # @param [FFI::Pointer(*Uint8T)] data 
  # @param [Integer] rows 
  # @param [Integer] cols 
  # @param [Integer] col 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :chart_add_data_cache, :lxw_chart_add_data_cache, [SeriesRange, :pointer, :ushort, :uchar, :uchar], :error
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*DrawingObject)) 
  # :stqh_last ::
  #   (FFI::Pointer(**DrawingObject)) 
  class DrawingObjects < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:drawing_types).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :image ::
  #   
  # :chart ::
  #   
  # :shape ::
  #   
  # 
  # @method _enum_drawing_types_
  # @return [Symbol]
  # @scope class
  enum :drawing_types, [
    :none, 0,
    :image, 1,
    :chart, 2,
    :shape, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:anchor_types).</em>
  # 
  # === Options:
  # :type_none ::
  #   
  # :type_image ::
  #   
  # :type_chart ::
  #   
  # 
  # @method _enum_anchor_types_
  # @return [Symbol]
  # @scope class
  enum :anchor_types, [
    :type_none, 0,
    :type_image, 1,
    :type_chart, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:anchor_edit_types).</em>
  # 
  # === Options:
  # :as_none ::
  #   
  # :as_relative ::
  #   
  # :as_one_cell ::
  #   
  # :as_absolute ::
  #   
  # 
  # @method _enum_anchor_edit_types_
  # @return [Symbol]
  # @scope class
  enum :anchor_edit_types, [
    :as_none, 0,
    :as_relative, 1,
    :as_one_cell, 2,
    :as_absolute, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:image_types).</em>
  # 
  # === Options:
  # :unknown ::
  #   
  # :png ::
  #   
  # :jpeg ::
  #   
  # :bmp ::
  #   
  # 
  # @method _enum_image_types_
  # @return [Symbol]
  # @scope class
  enum :image_types, [
    :unknown, 0,
    :png, 1,
    :jpeg, 2,
    :bmp, 3
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :col ::
  #   (Integer) 
  # :row ::
  #   (Integer) 
  # :col_offset ::
  #   (Float) 
  # :row_offset ::
  #   (Float) 
  class DrawingCoords < FFI::Struct
    layout :col, :uint,
           :row, :uint,
           :col_offset, :double,
           :row_offset, :double
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*DrawingObject)) 
  class DrawingObjectListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :anchor_type ::
  #   (Integer) 
  # :edit_as ::
  #   (Integer) 
  # :from ::
  #   (DrawingCoords) 
  # :to ::
  #   (DrawingCoords) 
  # :col_absolute ::
  #   (Integer) 
  # :row_absolute ::
  #   (Integer) 
  # :width ::
  #   (Integer) 
  # :height ::
  #   (Integer) 
  # :shape ::
  #   (Integer) 
  # :description ::
  #   (String) 
  # :url ::
  #   (String) 
  # :tip ::
  #   (String) 
  # :list_pointers ::
  #   (DrawingObjectListPointers) 
  class DrawingObject < FFI::Struct
    layout :anchor_type, :uchar,
           :edit_as, :uchar,
           :from, DrawingCoords.by_value,
           :to, DrawingCoords.by_value,
           :col_absolute, :uint,
           :row_absolute, :uint,
           :width, :uint,
           :height, :uint,
           :shape, :uchar,
           :description, :string,
           :url, :string,
           :tip, :string,
           :list_pointers, DrawingObjectListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :embedded ::
  #   (Integer) 
  # :drawing_objects ::
  #   (DrawingObjects) 
  module DrawingWrappers
    # @return [nil] 
    def free()
      Libxlsxwriter.drawing_free(self)
    end
    
    # @return [nil] 
    def assemble_xml_file()
      Libxlsxwriter.drawing_assemble_xml_file(self)
    end
  end
  
  class Drawing < FFI::Struct
    include DrawingWrappers
    layout :file, :pointer,
           :embedded, :uchar,
           :drawing_objects, DrawingObjects
  end
  
  # (Not documented)
  # 
  # @method drawing_new()
  # @return [Drawing] 
  # @scope class
  attach_function :drawing_new, :lxw_drawing_new, [], Drawing
  
  # (Not documented)
  # 
  # @method drawing_free(drawing)
  # @param [Drawing] drawing 
  # @return [nil] 
  # @scope class
  attach_function :drawing_free, :lxw_drawing_free, [Drawing], :void
  
  # (Not documented)
  # 
  # @method drawing_assemble_xml_file(self_)
  # @param [Drawing] self_ 
  # @return [nil] 
  # @scope class
  attach_function :drawing_assemble_xml_file, :lxw_drawing_assemble_xml_file, [Drawing], :void
  
  # (Not documented)
  # 
  # @method free_drawing_object(drawing_object)
  # @param [DrawingObject] drawing_object 
  # @return [nil] 
  # @scope class
  attach_function :free_drawing_object, :lxw_free_drawing_object, [DrawingObject], :void
  
  # (Not documented)
  # 
  # @method add_drawing_object(drawing, drawing_object)
  # @param [Drawing] drawing 
  # @param [DrawingObject] drawing_object 
  # @return [nil] 
  # @scope class
  attach_function :add_drawing_object, :lxw_add_drawing_object, [Drawing, DrawingObject], :void
  
  # (Not documented)
  # 
  # @method strerror(error_num)
  # @param [Symbol from _enum_error_] error_num 
  # @return [String] 
  # @scope class
  attach_function :strerror, :lxw_strerror, [:error], :string
  
  # (Not documented)
  # 
  # @method quote_sheetname(str)
  # @param [String] str 
  # @return [String] 
  # @scope class
  attach_function :quote_sheetname, :lxw_quote_sheetname, [:string], :string
  
  # (Not documented)
  # 
  # @method col_to_name(col_name, col_num, absolute)
  # @param [String] col_name 
  # @param [Integer] col_num 
  # @param [Integer] absolute 
  # @return [nil] 
  # @scope class
  attach_function :col_to_name, :lxw_col_to_name, [:string, :ushort, :uchar], :void
  
  # (Not documented)
  # 
  # @method rowcol_to_cell(cell_name, row, col)
  # @param [String] cell_name 
  # @param [Integer] row 
  # @param [Integer] col 
  # @return [nil] 
  # @scope class
  attach_function :rowcol_to_cell, :lxw_rowcol_to_cell, [:string, :uint, :ushort], :void
  
  # (Not documented)
  # 
  # @method rowcol_to_cell_abs(cell_name, row, col, abs_row, abs_col)
  # @param [String] cell_name 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [Integer] abs_row 
  # @param [Integer] abs_col 
  # @return [nil] 
  # @scope class
  attach_function :rowcol_to_cell_abs, :lxw_rowcol_to_cell_abs, [:string, :uint, :ushort, :uchar, :uchar], :void
  
  # (Not documented)
  # 
  # @method rowcol_to_range(range, first_row, first_col, last_row, last_col)
  # @param [String] range 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] last_row 
  # @param [Integer] last_col 
  # @return [nil] 
  # @scope class
  attach_function :rowcol_to_range, :lxw_rowcol_to_range, [:string, :uint, :ushort, :uint, :ushort], :void
  
  # (Not documented)
  # 
  # @method rowcol_to_range_abs(range, first_row, first_col, last_row, last_col)
  # @param [String] range 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] last_row 
  # @param [Integer] last_col 
  # @return [nil] 
  # @scope class
  attach_function :rowcol_to_range_abs, :lxw_rowcol_to_range_abs, [:string, :uint, :ushort, :uint, :ushort], :void
  
  # (Not documented)
  # 
  # @method rowcol_to_formula_abs(formula, sheetname, first_row, first_col, last_row, last_col)
  # @param [String] formula 
  # @param [String] sheetname 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] last_row 
  # @param [Integer] last_col 
  # @return [nil] 
  # @scope class
  attach_function :rowcol_to_formula_abs, :lxw_rowcol_to_formula_abs, [:string, :string, :uint, :ushort, :uint, :ushort], :void
  
  # (Not documented)
  # 
  # @method name_to_row(row_str)
  # @param [String] row_str 
  # @return [Integer] 
  # @scope class
  attach_function :name_to_row, :lxw_name_to_row, [:string], :uint
  
  # (Not documented)
  # 
  # @method name_to_col(col_str)
  # @param [String] col_str 
  # @return [Integer] 
  # @scope class
  attach_function :name_to_col, :lxw_name_to_col, [:string], :ushort
  
  # (Not documented)
  # 
  # @method name_to_row_2(row_str)
  # @param [String] row_str 
  # @return [Integer] 
  # @scope class
  attach_function :name_to_row_2, :lxw_name_to_row_2, [:string], :uint
  
  # (Not documented)
  # 
  # @method name_to_col_2(col_str)
  # @param [String] col_str 
  # @return [Integer] 
  # @scope class
  attach_function :name_to_col_2, :lxw_name_to_col_2, [:string], :ushort
  
  # (Not documented)
  # 
  # @method datetime_to_excel_date(datetime, date_1904)
  # @param [Datetime] datetime 
  # @param [Integer] date_1904 
  # @return [Float] 
  # @scope class
  attach_function :datetime_to_excel_date, :lxw_datetime_to_excel_date, [Datetime, :uchar], :double
  
  # (Not documented)
  # 
  # @method strdup(str)
  # @param [String] str 
  # @return [String] 
  # @scope class
  attach_function :strdup, :lxw_strdup, [:string], :string
  
  # (Not documented)
  # 
  # @method strdup_formula(formula)
  # @param [String] formula 
  # @return [String] 
  # @scope class
  attach_function :strdup_formula, :lxw_strdup_formula, [:string], :string
  
  # (Not documented)
  # 
  # @method utf8_strlen(str)
  # @param [String] str 
  # @return [Integer] 
  # @scope class
  attach_function :utf8_strlen, :lxw_utf8_strlen, [:string], :ulong
  
  # (Not documented)
  # 
  # @method str_tolower(str)
  # @param [String] str 
  # @return [nil] 
  # @scope class
  attach_function :str_tolower, :lxw_str_tolower, [:string], :void
  
  # (Not documented)
  # 
  # @method tmpfile(tmpdir)
  # @param [String] tmpdir 
  # @return [FFI::Pointer(*FILE)] 
  # @scope class
  attach_function :tmpfile, :lxw_tmpfile, [:string], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gridlines).</em>
  # 
  # === Options:
  # :hide_all ::
  #   Hide screen and print gridlines.
  # :show_screen ::
  #   Show screen gridlines.
  # :show_print ::
  #   Show print gridlines.
  # :show_all ::
  #   Show screen and print gridlines.
  # 
  # @method _enum_gridlines_
  # @return [Symbol]
  # @scope class
  enum :gridlines, [
    :hide_all, 0,
    :show_screen, 1,
    :show_print, 2,
    :show_all, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:validation_boolean).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :off ::
  #   Turn a data validation property off.
  # :on ::
  #   Turn a data validation property on. Data validation properties are
  #   generally on by default.
  # 
  # @method _enum_validation_boolean_
  # @return [Symbol]
  # @scope class
  enum :validation_boolean, [
    :default, 0,
    :off, 1,
    :on, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:validation_types).</em>
  # 
  # === Options:
  # :type_none ::
  #   
  # :type_integer ::
  #   Restrict cell input to whole/integer numbers only.
  # :type_integer_formula ::
  #   Restrict cell input to whole/integer numbers only, using a cell
  #    reference.
  # :type_decimal ::
  #   Restrict cell input to decimal numbers only.
  # :type_decimal_formula ::
  #   Restrict cell input to decimal numbers only, using a cell
  #   reference.
  # :type_list ::
  #   Restrict cell input to a list of strings in a dropdown.
  # :type_list_formula ::
  #   Restrict cell input to a list of strings in a dropdown, using a
  #   cell range.
  # :type_date ::
  #   Restrict cell input to date values only, using a lxw_datetime type.
  # :type_date_formula ::
  #   Restrict cell input to date values only, using a cell reference.
  # :type_date_number ::
  #   Restrict cell input to date values only, as a serial number.
  #   Undocumented.
  # :type_time ::
  #   Restrict cell input to time values only, using a lxw_datetime type.
  # :type_time_formula ::
  #   Restrict cell input to time values only, using a cell reference.
  # :type_time_number ::
  #   Restrict cell input to time values only, as a serial number.
  #   Undocumented.
  # :type_length ::
  #   Restrict cell input to strings of defined length, using a cell
  #   reference.
  # :type_length_formula ::
  #   Restrict cell input to strings of defined length, using a cell
  #   reference.
  # :type_custom_formula ::
  #   Restrict cell to input controlled by a custom formula that returns
  #   `TRUE/FALSE`.
  # :type_any ::
  #   Allow any type of input. Mainly only useful for pop-up messages.
  # 
  # @method _enum_validation_types_
  # @return [Symbol]
  # @scope class
  enum :validation_types, [
    :type_none, 0,
    :type_integer, 1,
    :type_integer_formula, 2,
    :type_decimal, 3,
    :type_decimal_formula, 4,
    :type_list, 5,
    :type_list_formula, 6,
    :type_date, 7,
    :type_date_formula, 8,
    :type_date_number, 9,
    :type_time, 10,
    :type_time_formula, 11,
    :type_time_number, 12,
    :type_length, 13,
    :type_length_formula, 14,
    :type_custom_formula, 15,
    :type_any, 16
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:validation_criteria).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :between ::
  #   Select data between two values.
  # :not_between ::
  #   Select data that is not between two values.
  # :equal_to ::
  #   Select data equal to a value.
  # :not_equal_to ::
  #   Select data not equal to a value.
  # :greater_than ::
  #   Select data greater than a value.
  # :less_than ::
  #   Select data less than a value.
  # :greater_than_or_equal_to ::
  #   Select data greater than or equal to a value.
  # :less_than_or_equal_to ::
  #   Select data less than or equal to a value.
  # 
  # @method _enum_validation_criteria_
  # @return [Symbol]
  # @scope class
  enum :validation_criteria, [
    :none, 0,
    :between, 1,
    :not_between, 2,
    :equal_to, 3,
    :not_equal_to, 4,
    :greater_than, 5,
    :less_than, 6,
    :greater_than_or_equal_to, 7,
    :less_than_or_equal_to, 8
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:validation_error_types).</em>
  # 
  # === Options:
  # :type_stop ::
  #   Show a "Stop" data validation pop-up message. This is the default.
  # :type_warning ::
  #   Show an "Error" data validation pop-up message.
  # :type_information ::
  #   Show an "Information" data validation pop-up message.
  # 
  # @method _enum_validation_error_types_
  # @return [Symbol]
  # @scope class
  enum :validation_error_types, [
    :type_stop, 0,
    :type_warning, 1,
    :type_information, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cell_types).</em>
  # 
  # === Options:
  # :number_cell ::
  #   
  # :string_cell ::
  #   
  # :inline_string_cell ::
  #   
  # :formula_cell ::
  #   
  # :array_formula_cell ::
  #   
  # :blank_cell ::
  #   
  # :boolean_cell ::
  #   
  # :hyperlink_url ::
  #   
  # :hyperlink_internal ::
  #   
  # :hyperlink_external ::
  #   
  # 
  # @method _enum_cell_types_
  # @return [Symbol]
  # @scope class
  enum :cell_types, [
    :number_cell, 1,
    :string_cell, 2,
    :inline_string_cell, 3,
    :formula_cell, 4,
    :array_formula_cell, 5,
    :blank_cell, 6,
    :boolean_cell, 7,
    :hyperlink_url, 8,
    :hyperlink_internal, 9,
    :hyperlink_external, 10
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:pane_types).</em>
  # 
  # === Options:
  # :no_panes ::
  #   
  # :freeze_panes ::
  #   
  # :split_panes ::
  #   
  # :freeze_split_panes ::
  #   
  # 
  # @method _enum_pane_types_
  # @return [Symbol]
  # @scope class
  enum :pane_types, [
    :no_panes, 0,
    :freeze_panes, 1,
    :split_panes, 2,
    :freeze_split_panes, 3
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :rbh_root ::
  #   (FFI::Pointer(*Cell)) 
  class TableCells < FFI::Struct
    layout :rbh_root, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :rbh_root ::
  #   (FFI::Pointer(*Row)) 
  # :cached_row ::
  #   (FFI::Pointer(*Row)) 
  # :cached_row_num ::
  #   (Integer) 
  class TableRows < FFI::Struct
    layout :rbh_root, :pointer,
           :cached_row, :pointer,
           :cached_row_num, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*MergedRange)) 
  # :stqh_last ::
  #   (FFI::Pointer(**MergedRange)) 
  class MergedRanges < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*Selection)) 
  # :stqh_last ::
  #   (FFI::Pointer(**Selection)) 
  class Selections < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*DataValidation)) 
  # :stqh_last ::
  #   (FFI::Pointer(**DataValidation)) 
  class DataValidations < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*ImageOptions)) 
  # :stqh_last ::
  #   (FFI::Pointer(**ImageOptions)) 
  class ImageData < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*ImageOptions)) 
  # :stqh_last ::
  #   (FFI::Pointer(**ImageOptions)) 
  class ChartData < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :hidden ::
  #   (Integer) Hide the row/column
  # :level ::
  #   (Integer) 
  # :collapsed ::
  #   (Integer) 
  class RowColOptions < FFI::Struct
    layout :hidden, :uchar,
           :level, :uchar,
           :collapsed, :uchar
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :firstcol ::
  #   (Integer) 
  # :lastcol ::
  #   (Integer) 
  # :width ::
  #   (Float) 
  # :format ::
  #   (Format) 
  # :hidden ::
  #   (Integer) 
  # :level ::
  #   (Integer) 
  # :collapsed ::
  #   (Integer) 
  class ColOptions < FFI::Struct
    layout :firstcol, :ushort,
           :lastcol, :ushort,
           :width, :double,
           :format, Format,
           :hidden, :uchar,
           :level, :uchar,
           :collapsed, :uchar
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*MergedRange)) 
  class MergedRangeListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :first_row ::
  #   (Integer) 
  # :last_row ::
  #   (Integer) 
  # :first_col ::
  #   (Integer) 
  # :last_col ::
  #   (Integer) 
  # :list_pointers ::
  #   (MergedRangeListPointers) 
  class MergedRange < FFI::Struct
    layout :first_row, :uint,
           :last_row, :uint,
           :first_col, :ushort,
           :last_col, :ushort,
           :list_pointers, MergedRangeListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :in_use ::
  #   (Integer) 
  # :first_row ::
  #   (Integer) 
  # :last_row ::
  #   (Integer) 
  class RepeatRows < FFI::Struct
    layout :in_use, :uchar,
           :first_row, :uint,
           :last_row, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :in_use ::
  #   (Integer) 
  # :first_col ::
  #   (Integer) 
  # :last_col ::
  #   (Integer) 
  class RepeatCols < FFI::Struct
    layout :in_use, :uchar,
           :first_col, :ushort,
           :last_col, :ushort
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :in_use ::
  #   (Integer) 
  # :first_row ::
  #   (Integer) 
  # :last_row ::
  #   (Integer) 
  # :first_col ::
  #   (Integer) 
  # :last_col ::
  #   (Integer) 
  class PrintArea < FFI::Struct
    layout :in_use, :uchar,
           :first_row, :uint,
           :last_row, :uint,
           :first_col, :ushort,
           :last_col, :ushort
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :in_use ::
  #   (Integer) 
  # :first_row ::
  #   (Integer) 
  # :last_row ::
  #   (Integer) 
  # :first_col ::
  #   (Integer) 
  # :last_col ::
  #   (Integer) 
  class Autofilter < FFI::Struct
    layout :in_use, :uchar,
           :first_row, :uint,
           :last_row, :uint,
           :first_col, :ushort,
           :last_col, :ushort
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :type ::
  #   (Integer) 
  # :first_row ::
  #   (Integer) 
  # :first_col ::
  #   (Integer) 
  # :top_row ::
  #   (Integer) 
  # :left_col ::
  #   (Integer) 
  # :x_split ::
  #   (Float) 
  # :y_split ::
  #   (Float) 
  class Panes < FFI::Struct
    layout :type, :uchar,
           :first_row, :uint,
           :first_col, :ushort,
           :top_row, :uint,
           :left_col, :ushort,
           :x_split, :double,
           :y_split, :double
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*Selection)) 
  class SelectionListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :pane ::
  #   (Array<Integer>) 
  # :active_cell ::
  #   (Array<Integer>) 
  # :sqref ::
  #   (Array<Integer>) 
  # :list_pointers ::
  #   (SelectionListPointers) 
  class Selection < FFI::Struct
    layout :pane, [:char, 12],
           :active_cell, [:char, 28],
           :sqref, [:char, 28],
           :list_pointers, SelectionListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*DataValidation)) 
  class DataValidationListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :validate ::
  #   (Integer) Set the validation type. Should be a #lxw_validation_types value.
  # :criteria ::
  #   (Integer) Set the validation criteria type to select the data. Should be a
  #   #lxw_validation_criteria value.
  # :ignore_blank ::
  #   (Integer) Controls whether a data validation is not applied to blank data in the
  #   cell. Should be a #lxw_validation_boolean value. It is on by
  #   default.
  # :show_input ::
  #   (Integer) This parameter is used to toggle on and off the 'Show input message
  #   when cell is selected' option in the Excel data validation dialog. When
  #   the option is off an input message is not displayed even if it has been
  #   set using input_message. Should be a #lxw_validation_boolean value. It
  #   is on by default.
  # :show_error ::
  #   (Integer) This parameter is used to toggle on and off the 'Show error alert
  #   after invalid data is entered' option in the Excel data validation
  #   dialog. When the option is off an error message is not displayed even
  #   if it has been set using error_message. Should be a
  #   #lxw_validation_boolean value. It is on by default.
  # :error_type ::
  #   (Integer) This parameter is used to specify the type of error dialog that is
  #   displayed. Should be a #lxw_validation_error_types value.
  # :dropdown ::
  #   (Integer) This parameter is used to toggle on and off the 'In-cell dropdown'
  #   option in the Excel data validation dialog. When the option is on a
  #   dropdown list will be shown for list validations. Should be a
  #   #lxw_validation_boolean value. It is on by default.
  # :is_between ::
  #   (Integer) 
  # :value_number ::
  #   (Float) This parameter is used to set the limiting value to which the criteria
  #   is applied using a whole or decimal number.
  # :value_formula ::
  #   (String) This parameter is used to set the limiting value to which the criteria
  #   is applied using a cell reference. It is valid for any of the
  #   `_FORMULA` validation types.
  # :value_list ::
  #   (FFI::Pointer(**CharS)) This parameter is used to set a list of strings for a drop down list.
  #   The list should be a `NULL` terminated array of char* strings:
  #   
  #   @code
  #      char *list() = {"open", "high", "close", NULL};
  #   
  #      data_validation->validate   = LXW_VALIDATION_TYPE_LIST;
  #      data_validation->value_list = list;
  #   @endcode
  #   
  #   The `value_formula` parameter can also be used to specify a list from
  #   an Excel cell range.
  #   
  #   Note, the string list is restricted by Excel to 255 characters,
  #   including comma separators.
  # :value_datetime ::
  #   (Datetime) This parameter is used to set the limiting value to which the date or
  #   time criteria is applied using a #lxw_datetime struct.
  # :minimum_number ::
  #   (Float) This parameter is the same as `value_number` but for the minimum value
  #   when a `BETWEEN` criteria is used.
  # :minimum_formula ::
  #   (String) This parameter is the same as `value_formula` but for the minimum value
  #   when a `BETWEEN` criteria is used.
  # :minimum_datetime ::
  #   (Datetime) This parameter is the same as `value_datetime` but for the minimum value
  #   when a `BETWEEN` criteria is used.
  # :maximum_number ::
  #   (Float) This parameter is the same as `value_number` but for the maximum value
  #   when a `BETWEEN` criteria is used.
  # :maximum_formula ::
  #   (String) This parameter is the same as `value_formula` but for the maximum value
  #   when a `BETWEEN` criteria is used.
  # :maximum_datetime ::
  #   (Datetime) This parameter is the same as `value_datetime` but for the maximum value
  #   when a `BETWEEN` criteria is used.
  # :input_title ::
  #   (String) The input_title parameter is used to set the title of the input message
  #   that is displayed when a cell is entered. It has no default value and
  #   is only displayed if the input message is displayed. See the
  #   `input_message` parameter below.
  #   
  #   The maximum title length is 32 characters.
  # :input_message ::
  #   (String) The input_message parameter is used to set the input message that is
  #   displayed when a cell is entered. It has no default value.
  #   
  #   The message can be split over several lines using newlines. The maximum
  #   message length is 255 characters.
  # :error_title ::
  #   (String) The error_title parameter is used to set the title of the error message
  #   that is displayed when the data validation criteria is not met. The
  #   default error title is 'Microsoft Excel'. The maximum title length is
  #   32 characters.
  # :error_message ::
  #   (String) The error_message parameter is used to set the error message that is
  #   displayed when a cell is entered. The default error message is "The
  #   value you entered is not valid. A user has restricted values that can
  #   be entered into the cell".
  #   
  #   The message can be split over several lines using newlines. The maximum
  #   message length is 255 characters.
  # :sqref ::
  #   (Array<Integer>) 
  # :list_pointers ::
  #   (DataValidationListPointers) 
  class DataValidation < FFI::Struct
    layout :validate, :uchar,
           :criteria, :uchar,
           :ignore_blank, :uchar,
           :show_input, :uchar,
           :show_error, :uchar,
           :error_type, :uchar,
           :dropdown, :uchar,
           :is_between, :uchar,
           :value_number, :double,
           :value_formula, :string,
           :value_list, :pointer,
           :value_datetime, Datetime.by_value,
           :minimum_number, :double,
           :minimum_formula, :string,
           :minimum_datetime, Datetime.by_value,
           :maximum_number, :double,
           :maximum_formula, :string,
           :maximum_datetime, Datetime.by_value,
           :input_title, :string,
           :input_message, :string,
           :error_title, :string,
           :error_message, :string,
           :sqref, [:char, 28],
           :list_pointers, DataValidationListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*ImageOptions)) 
  class ImageOptionsListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :x_offset ::
  #   (Integer) Offset from the left of the cell in pixels.
  # :y_offset ::
  #   (Integer) Offset from the top of the cell in pixels.
  # :x_scale ::
  #   (Float) X scale of the image as a decimal.
  # :y_scale ::
  #   (Float) Y scale of the image as a decimal.
  # :row ::
  #   (Integer) 
  # :col ::
  #   (Integer) 
  # :filename ::
  #   (String) 
  # :url ::
  #   (String) 
  # :tip ::
  #   (String) 
  # :anchor ::
  #   (Integer) 
  # :stream ::
  #   (FFI::Pointer(*FILE)) Internal metadata.
  # :image_type ::
  #   (Integer) 
  # :width ::
  #   (Float) 
  # :height ::
  #   (Float) 
  # :short_name ::
  #   (String) 
  # :extension ::
  #   (String) 
  # :x_dpi ::
  #   (Float) 
  # :y_dpi ::
  #   (Float) 
  # :chart ::
  #   (Chart) 
  # :list_pointers ::
  #   (ImageOptionsListPointers) 
  class ImageOptions < FFI::Struct
    layout :x_offset, :int,
           :y_offset, :int,
           :x_scale, :double,
           :y_scale, :double,
           :row, :uint,
           :col, :ushort,
           :filename, :string,
           :url, :string,
           :tip, :string,
           :anchor, :uchar,
           :stream, :pointer,
           :image_type, :uchar,
           :width, :double,
           :height, :double,
           :short_name, :string,
           :extension, :string,
           :x_dpi, :double,
           :y_dpi, :double,
           :chart, Chart,
           :list_pointers, ImageOptionsListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :margin ::
  #   (Float) Header or footer margin in inches. Excel default is 0.3.
  class HeaderFooterOptions < FFI::Struct
    layout :margin, :double
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :no_select_locked_cells ::
  #   (Integer) Turn off selection of locked cells. This in on in Excel by default.
  # :no_select_unlocked_cells ::
  #   (Integer) Turn off selection of unlocked cells. This in on in Excel by default.
  # :format_cells ::
  #   (Integer) Prevent formatting of cells.
  # :format_columns ::
  #   (Integer) Prevent formatting of columns.
  # :format_rows ::
  #   (Integer) Prevent formatting of rows.
  # :insert_columns ::
  #   (Integer) Prevent insertion of columns.
  # :insert_rows ::
  #   (Integer) Prevent insertion of rows.
  # :insert_hyperlinks ::
  #   (Integer) Prevent insertion of hyperlinks.
  # :delete_columns ::
  #   (Integer) Prevent deletion of columns.
  # :delete_rows ::
  #   (Integer) Prevent deletion of rows.
  # :sort ::
  #   (Integer) Prevent sorting data.
  # :autofilter ::
  #   (Integer) Prevent filtering data.
  # :pivot_tables ::
  #   (Integer) Prevent insertion of pivot tables.
  # :scenarios ::
  #   (Integer) Protect scenarios.
  # :objects ::
  #   (Integer) Protect drawing objects.
  # :no_sheet ::
  #   (Integer) 
  # :content ::
  #   (Integer) 
  # :is_configured ::
  #   (Integer) 
  # :hash ::
  #   (Array<Integer>) 
  class Protection < FFI::Struct
    layout :no_select_locked_cells, :uchar,
           :no_select_unlocked_cells, :uchar,
           :format_cells, :uchar,
           :format_columns, :uchar,
           :format_rows, :uchar,
           :insert_columns, :uchar,
           :insert_rows, :uchar,
           :insert_hyperlinks, :uchar,
           :delete_columns, :uchar,
           :delete_rows, :uchar,
           :sort, :uchar,
           :autofilter, :uchar,
           :pivot_tables, :uchar,
           :scenarios, :uchar,
           :objects, :uchar,
           :no_sheet, :uchar,
           :content, :uchar,
           :is_configured, :uchar,
           :hash, [:char, 5]
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*Worksheet)) 
  class WorksheetListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :optimize_tmpfile ::
  #   (FFI::Pointer(*FILE)) 
  # :table ::
  #   (TableRows) 
  # :hyperlinks ::
  #   (TableRows) 
  # :array ::
  #   (FFI::Pointer(**Cell)) 
  # :merged_ranges ::
  #   (MergedRanges) 
  # :selections ::
  #   (Selections) 
  # :data_validations ::
  #   (DataValidations) 
  # :image_data ::
  #   (ImageData) 
  # :chart_data ::
  #   (ChartData) 
  # :dim_rowmin ::
  #   (Integer) 
  # :dim_rowmax ::
  #   (Integer) 
  # :dim_colmin ::
  #   (Integer) 
  # :dim_colmax ::
  #   (Integer) 
  # :sst ::
  #   (Sst) 
  # :name ::
  #   (String) 
  # :quoted_name ::
  #   (String) 
  # :tmpdir ::
  #   (String) 
  # :index ::
  #   (Integer) 
  # :active ::
  #   (Integer) 
  # :selected ::
  #   (Integer) 
  # :hidden ::
  #   (Integer) 
  # :active_sheet ::
  #   (FFI::Pointer(*Uint16T)) 
  # :first_sheet ::
  #   (FFI::Pointer(*Uint16T)) 
  # :col_options ::
  #   (FFI::Pointer(**ColOptions)) 
  # :col_options_max ::
  #   (Integer) 
  # :col_sizes ::
  #   (FFI::Pointer(*Double)) 
  # :col_sizes_max ::
  #   (Integer) 
  # :col_formats ::
  #   (FFI::Pointer(**Format)) 
  # :col_formats_max ::
  #   (Integer) 
  # :col_size_changed ::
  #   (Integer) 
  # :row_size_changed ::
  #   (Integer) 
  # :optimize ::
  #   (Integer) 
  # :optimize_row ::
  #   (FFI::Pointer(*Row)) 
  # :fit_height ::
  #   (Integer) 
  # :fit_width ::
  #   (Integer) 
  # :horizontal_dpi ::
  #   (Integer) 
  # :hlink_count ::
  #   (Integer) 
  # :page_start ::
  #   (Integer) 
  # :print_scale ::
  #   (Integer) 
  # :rel_count ::
  #   (Integer) 
  # :vertical_dpi ::
  #   (Integer) 
  # :zoom ::
  #   (Integer) 
  # :filter_on ::
  #   (Integer) 
  # :fit_page ::
  #   (Integer) 
  # :hcenter ::
  #   (Integer) 
  # :orientation ::
  #   (Integer) 
  # :outline_changed ::
  #   (Integer) 
  # :outline_on ::
  #   (Integer) 
  # :outline_style ::
  #   (Integer) 
  # :outline_below ::
  #   (Integer) 
  # :outline_right ::
  #   (Integer) 
  # :page_order ::
  #   (Integer) 
  # :page_setup_changed ::
  #   (Integer) 
  # :page_view ::
  #   (Integer) 
  # :paper_size ::
  #   (Integer) 
  # :print_gridlines ::
  #   (Integer) 
  # :print_headers ::
  #   (Integer) 
  # :print_options_changed ::
  #   (Integer) 
  # :right_to_left ::
  #   (Integer) 
  # :screen_gridlines ::
  #   (Integer) 
  # :show_zeros ::
  #   (Integer) 
  # :vba_codename ::
  #   (Integer) 
  # :vcenter ::
  #   (Integer) 
  # :zoom_scale_normal ::
  #   (Integer) 
  # :num_validations ::
  #   (Integer) 
  # :tab_color ::
  #   (Integer) 
  # :margin_left ::
  #   (Float) 
  # :margin_right ::
  #   (Float) 
  # :margin_top ::
  #   (Float) 
  # :margin_bottom ::
  #   (Float) 
  # :margin_header ::
  #   (Float) 
  # :margin_footer ::
  #   (Float) 
  # :default_row_height ::
  #   (Float) 
  # :default_row_pixels ::
  #   (Integer) 
  # :default_col_pixels ::
  #   (Integer) 
  # :default_row_zeroed ::
  #   (Integer) 
  # :default_row_set ::
  #   (Integer) 
  # :outline_row_level ::
  #   (Integer) 
  # :outline_col_level ::
  #   (Integer) 
  # :header_footer_changed ::
  #   (Integer) 
  # :header ::
  #   (Array<Integer>) 
  # :footer ::
  #   (Array<Integer>) 
  # :repeat_rows ::
  #   (RepeatRows) 
  # :repeat_cols ::
  #   (RepeatCols) 
  # :print_area ::
  #   (PrintArea) 
  # :autofilter ::
  #   (Autofilter) 
  # :merged_range_count ::
  #   (Integer) 
  # :hbreaks ::
  #   (FFI::Pointer(*RowT)) 
  # :vbreaks ::
  #   (FFI::Pointer(*ColT)) 
  # :hbreaks_count ::
  #   (Integer) 
  # :vbreaks_count ::
  #   (Integer) 
  # :external_hyperlinks ::
  #   (FFI::Pointer(*RelTuples)) 
  # :external_drawing_links ::
  #   (FFI::Pointer(*RelTuples)) 
  # :drawing_links ::
  #   (FFI::Pointer(*RelTuples)) 
  # :panes ::
  #   (Panes) 
  # :protection ::
  #   (Protection) 
  # :drawing ::
  #   (Drawing) 
  # :list_pointers ::
  #   (WorksheetListPointers) 
  module WorksheetWrappers
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [Float] number 
    # @param [Format] format 
    # @return [Symbol from _enum_error_] 
    def write_number(row, col, number, format)
      Libxlsxwriter.worksheet_write_number(self, row, col, number, format)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [String] string 
    # @param [Format] format 
    # @return [Symbol from _enum_error_] 
    def write_string(row, col, string, format)
      Libxlsxwriter.worksheet_write_string(self, row, col, string, format)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [String] formula 
    # @param [Format] format 
    # @return [Symbol from _enum_error_] 
    def write_formula(row, col, formula, format)
      Libxlsxwriter.worksheet_write_formula(self, row, col, formula, format)
    end
    
    # @param [Integer] first_row 
    # @param [Integer] first_col 
    # @param [Integer] last_row 
    # @param [Integer] last_col 
    # @param [String] formula 
    # @param [Format] format 
    # @return [Symbol from _enum_error_] 
    def write_array_formula(first_row, first_col, last_row, last_col, formula, format)
      Libxlsxwriter.worksheet_write_array_formula(self, first_row, first_col, last_row, last_col, formula, format)
    end
    
    # @param [Integer] first_row 
    # @param [Integer] first_col 
    # @param [Integer] last_row 
    # @param [Integer] last_col 
    # @param [String] formula 
    # @param [Format] format 
    # @param [Float] result 
    # @return [Symbol from _enum_error_] 
    def write_array_formula_num(first_row, first_col, last_row, last_col, formula, format, result)
      Libxlsxwriter.worksheet_write_array_formula_num(self, first_row, first_col, last_row, last_col, formula, format, result)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [Datetime] datetime 
    # @param [Format] format 
    # @return [Symbol from _enum_error_] 
    def write_datetime(row, col, datetime, format)
      Libxlsxwriter.worksheet_write_datetime(self, row, col, datetime, format)
    end
    
    # @param [Integer] row_num 
    # @param [Integer] col_num 
    # @param [String] url 
    # @param [Format] format 
    # @param [String] string 
    # @param [String] tooltip 
    # @return [Symbol from _enum_error_] 
    def write_url_opt(row_num, col_num, url, format, string, tooltip)
      Libxlsxwriter.worksheet_write_url_opt(self, row_num, col_num, url, format, string, tooltip)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [String] url 
    # @param [Format] format 
    # @return [Symbol from _enum_error_] 
    def write_url(row, col, url, format)
      Libxlsxwriter.worksheet_write_url(self, row, col, url, format)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [Integer] value 
    # @param [Format] format 
    # @return [Symbol from _enum_error_] 
    def write_boolean(row, col, value, format)
      Libxlsxwriter.worksheet_write_boolean(self, row, col, value, format)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [Format] format 
    # @return [Symbol from _enum_error_] 
    def write_blank(row, col, format)
      Libxlsxwriter.worksheet_write_blank(self, row, col, format)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [String] formula 
    # @param [Format] format 
    # @param [Float] result 
    # @return [Symbol from _enum_error_] 
    def write_formula_num(row, col, formula, format, result)
      Libxlsxwriter.worksheet_write_formula_num(self, row, col, formula, format, result)
    end
    
    # @param [Integer] row 
    # @param [Float] height 
    # @param [Format] format 
    # @return [Symbol from _enum_error_] 
    def set_row(row, height, format)
      Libxlsxwriter.worksheet_set_row(self, row, height, format)
    end
    
    # @param [Integer] row 
    # @param [Float] height 
    # @param [Format] format 
    # @param [RowColOptions] options 
    # @return [Symbol from _enum_error_] 
    def set_row_opt(row, height, format, options)
      Libxlsxwriter.worksheet_set_row_opt(self, row, height, format, options)
    end
    
    # @param [Integer] first_col 
    # @param [Integer] last_col 
    # @param [Float] width 
    # @param [Format] format 
    # @return [Symbol from _enum_error_] 
    def set_column(first_col, last_col, width, format)
      Libxlsxwriter.worksheet_set_column(self, first_col, last_col, width, format)
    end
    
    # @param [Integer] first_col 
    # @param [Integer] last_col 
    # @param [Float] width 
    # @param [Format] format 
    # @param [RowColOptions] options 
    # @return [Symbol from _enum_error_] 
    def set_column_opt(first_col, last_col, width, format, options)
      Libxlsxwriter.worksheet_set_column_opt(self, first_col, last_col, width, format, options)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [String] filename 
    # @return [Symbol from _enum_error_] 
    def insert_image(row, col, filename)
      Libxlsxwriter.worksheet_insert_image(self, row, col, filename)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [String] filename 
    # @param [ImageOptions] options 
    # @return [Symbol from _enum_error_] 
    def insert_image_opt(row, col, filename, options)
      Libxlsxwriter.worksheet_insert_image_opt(self, row, col, filename, options)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [Chart] chart 
    # @return [Symbol from _enum_error_] 
    def insert_chart(row, col, chart)
      Libxlsxwriter.worksheet_insert_chart(self, row, col, chart)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [Chart] chart 
    # @param [ImageOptions] user_options 
    # @return [Symbol from _enum_error_] 
    def insert_chart_opt(row, col, chart, user_options)
      Libxlsxwriter.worksheet_insert_chart_opt(self, row, col, chart, user_options)
    end
    
    # @param [Integer] first_row 
    # @param [Integer] first_col 
    # @param [Integer] last_row 
    # @param [Integer] last_col 
    # @param [String] string 
    # @param [Format] format 
    # @return [Symbol from _enum_error_] 
    def merge_range(first_row, first_col, last_row, last_col, string, format)
      Libxlsxwriter.worksheet_merge_range(self, first_row, first_col, last_row, last_col, string, format)
    end
    
    # @param [Integer] first_row 
    # @param [Integer] first_col 
    # @param [Integer] last_row 
    # @param [Integer] last_col 
    # @return [Symbol from _enum_error_] 
    def autofilter(first_row, first_col, last_row, last_col)
      Libxlsxwriter.worksheet_autofilter(self, first_row, first_col, last_row, last_col)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @param [DataValidation] validation 
    # @return [Symbol from _enum_error_] 
    def data_validation_cell(row, col, validation)
      Libxlsxwriter.worksheet_data_validation_cell(self, row, col, validation)
    end
    
    # @param [Integer] first_row 
    # @param [Integer] first_col 
    # @param [Integer] last_row 
    # @param [Integer] last_col 
    # @param [DataValidation] validation 
    # @return [Symbol from _enum_error_] 
    def data_validation_range(first_row, first_col, last_row, last_col, validation)
      Libxlsxwriter.worksheet_data_validation_range(self, first_row, first_col, last_row, last_col, validation)
    end
    
    # @return [nil] 
    def activate()
      Libxlsxwriter.worksheet_activate(self)
    end
    
    # @return [nil] 
    def select()
      Libxlsxwriter.worksheet_select(self)
    end
    
    # @return [nil] 
    def hide()
      Libxlsxwriter.worksheet_hide(self)
    end
    
    # @return [nil] 
    def set_first_sheet()
      Libxlsxwriter.worksheet_set_first_sheet(self)
    end
    
    # @param [Integer] row 
    # @param [Integer] col 
    # @return [nil] 
    def freeze_panes(row, col)
      Libxlsxwriter.worksheet_freeze_panes(self, row, col)
    end
    
    # @param [Float] vertical 
    # @param [Float] horizontal 
    # @return [nil] 
    def split_panes(vertical, horizontal)
      Libxlsxwriter.worksheet_split_panes(self, vertical, horizontal)
    end
    
    # @param [Integer] first_row 
    # @param [Integer] first_col 
    # @param [Integer] top_row 
    # @param [Integer] left_col 
    # @param [Integer] type 
    # @return [nil] 
    def freeze_panes_opt(first_row, first_col, top_row, left_col, type)
      Libxlsxwriter.worksheet_freeze_panes_opt(self, first_row, first_col, top_row, left_col, type)
    end
    
    # @param [Float] vertical 
    # @param [Float] horizontal 
    # @param [Integer] top_row 
    # @param [Integer] left_col 
    # @return [nil] 
    def split_panes_opt(vertical, horizontal, top_row, left_col)
      Libxlsxwriter.worksheet_split_panes_opt(self, vertical, horizontal, top_row, left_col)
    end
    
    # @param [Integer] first_row 
    # @param [Integer] first_col 
    # @param [Integer] last_row 
    # @param [Integer] last_col 
    # @return [nil] 
    def set_selection(first_row, first_col, last_row, last_col)
      Libxlsxwriter.worksheet_set_selection(self, first_row, first_col, last_row, last_col)
    end
    
    # @return [nil] 
    def set_landscape()
      Libxlsxwriter.worksheet_set_landscape(self)
    end
    
    # @return [nil] 
    def set_portrait()
      Libxlsxwriter.worksheet_set_portrait(self)
    end
    
    # @return [nil] 
    def set_page_view()
      Libxlsxwriter.worksheet_set_page_view(self)
    end
    
    # @param [Integer] paper_type 
    # @return [nil] 
    def set_paper(paper_type)
      Libxlsxwriter.worksheet_set_paper(self, paper_type)
    end
    
    # @param [Float] left 
    # @param [Float] right 
    # @param [Float] top 
    # @param [Float] bottom 
    # @return [nil] 
    def set_margins(left, right, top, bottom)
      Libxlsxwriter.worksheet_set_margins(self, left, right, top, bottom)
    end
    
    # @param [String] string 
    # @return [Symbol from _enum_error_] 
    def set_header(string)
      Libxlsxwriter.worksheet_set_header(self, string)
    end
    
    # @param [String] string 
    # @return [Symbol from _enum_error_] 
    def set_footer(string)
      Libxlsxwriter.worksheet_set_footer(self, string)
    end
    
    # @param [String] string 
    # @param [HeaderFooterOptions] options 
    # @return [Symbol from _enum_error_] 
    def set_header_opt(string, options)
      Libxlsxwriter.worksheet_set_header_opt(self, string, options)
    end
    
    # @param [String] string 
    # @param [HeaderFooterOptions] options 
    # @return [Symbol from _enum_error_] 
    def set_footer_opt(string, options)
      Libxlsxwriter.worksheet_set_footer_opt(self, string, options)
    end
    
    # @param [FFI::Pointer(*U_int)] breaks 
    # @return [Symbol from _enum_error_] 
    def set_h_pagebreaks(breaks)
      Libxlsxwriter.worksheet_set_h_pagebreaks(self, breaks)
    end
    
    # @param [FFI::Pointer(*U_short)] breaks 
    # @return [Symbol from _enum_error_] 
    def set_v_pagebreaks(breaks)
      Libxlsxwriter.worksheet_set_v_pagebreaks(self, breaks)
    end
    
    # @return [nil] 
    def print_across()
      Libxlsxwriter.worksheet_print_across(self)
    end
    
    # @param [Integer] scale 
    # @return [nil] 
    def set_zoom(scale)
      Libxlsxwriter.worksheet_set_zoom(self, scale)
    end
    
    # @param [Integer] option 
    # @return [nil] 
    def gridlines(option)
      Libxlsxwriter.worksheet_gridlines(self, option)
    end
    
    # @return [nil] 
    def center_horizontally()
      Libxlsxwriter.worksheet_center_horizontally(self)
    end
    
    # @return [nil] 
    def center_vertically()
      Libxlsxwriter.worksheet_center_vertically(self)
    end
    
    # @return [nil] 
    def print_row_col_headers()
      Libxlsxwriter.worksheet_print_row_col_headers(self)
    end
    
    # @param [Integer] first_row 
    # @param [Integer] last_row 
    # @return [Symbol from _enum_error_] 
    def repeat_rows(first_row, last_row)
      Libxlsxwriter.worksheet_repeat_rows(self, first_row, last_row)
    end
    
    # @param [Integer] first_col 
    # @param [Integer] last_col 
    # @return [Symbol from _enum_error_] 
    def repeat_columns(first_col, last_col)
      Libxlsxwriter.worksheet_repeat_columns(self, first_col, last_col)
    end
    
    # @param [Integer] first_row 
    # @param [Integer] first_col 
    # @param [Integer] last_row 
    # @param [Integer] last_col 
    # @return [Symbol from _enum_error_] 
    def print_area(first_row, first_col, last_row, last_col)
      Libxlsxwriter.worksheet_print_area(self, first_row, first_col, last_row, last_col)
    end
    
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def fit_to_pages(width, height)
      Libxlsxwriter.worksheet_fit_to_pages(self, width, height)
    end
    
    # @param [Integer] start_page 
    # @return [nil] 
    def set_start_page(start_page)
      Libxlsxwriter.worksheet_set_start_page(self, start_page)
    end
    
    # @param [Integer] scale 
    # @return [nil] 
    def set_print_scale(scale)
      Libxlsxwriter.worksheet_set_print_scale(self, scale)
    end
    
    # @return [nil] 
    def right_to_left()
      Libxlsxwriter.worksheet_right_to_left(self)
    end
    
    # @return [nil] 
    def hide_zero()
      Libxlsxwriter.worksheet_hide_zero(self)
    end
    
    # @param [Integer] color 
    # @return [nil] 
    def set_tab_color(color)
      Libxlsxwriter.worksheet_set_tab_color(self, color)
    end
    
    # @param [String] password 
    # @param [Protection] options 
    # @return [nil] 
    def protect(password, options)
      Libxlsxwriter.worksheet_protect(self, password, options)
    end
    
    # @param [Integer] visible 
    # @param [Integer] symbols_below 
    # @param [Integer] symbols_right 
    # @param [Integer] auto_style 
    # @return [nil] 
    def outline_settings(visible, symbols_below, symbols_right, auto_style)
      Libxlsxwriter.worksheet_outline_settings(self, visible, symbols_below, symbols_right, auto_style)
    end
    
    # @param [Float] height 
    # @param [Integer] hide_unused_rows 
    # @return [nil] 
    def set_default_row(height, hide_unused_rows)
      Libxlsxwriter.worksheet_set_default_row(self, height, hide_unused_rows)
    end
    
    # @return [nil] 
    def free()
      Libxlsxwriter.worksheet_free(self)
    end
    
    # @return [nil] 
    def assemble_xml_file()
      Libxlsxwriter.worksheet_assemble_xml_file(self)
    end
    
    # @return [nil] 
    def write_single_row()
      Libxlsxwriter.worksheet_write_single_row(self)
    end
    
    # @param [Integer] image_ref_id 
    # @param [Integer] drawing_id 
    # @param [ImageOptions] image_data 
    # @return [nil] 
    def prepare_image(image_ref_id, drawing_id, image_data)
      Libxlsxwriter.worksheet_prepare_image(self, image_ref_id, drawing_id, image_data)
    end
    
    # @param [Integer] chart_ref_id 
    # @param [Integer] drawing_id 
    # @param [ImageOptions] image_data 
    # @return [nil] 
    def prepare_chart(chart_ref_id, drawing_id, image_data)
      Libxlsxwriter.worksheet_prepare_chart(self, chart_ref_id, drawing_id, image_data)
    end
    
    # @param [Integer] row_num 
    # @return [Row] 
    def find_row(row_num)
      Row.new Libxlsxwriter.worksheet_find_row(self, row_num)
    end
  end
  
  class Worksheet < FFI::Struct
    include WorksheetWrappers
    layout :file, :pointer,
           :optimize_tmpfile, :pointer,
           :table, TableRows,
           :hyperlinks, TableRows,
           :array, :pointer,
           :merged_ranges, MergedRanges,
           :selections, Selections,
           :data_validations, DataValidations,
           :image_data, ImageData,
           :chart_data, ChartData,
           :dim_rowmin, :uint,
           :dim_rowmax, :uint,
           :dim_colmin, :ushort,
           :dim_colmax, :ushort,
           :sst, Sst,
           :name, :string,
           :quoted_name, :string,
           :tmpdir, :string,
           :index, :uint,
           :active, :uchar,
           :selected, :uchar,
           :hidden, :uchar,
           :active_sheet, :pointer,
           :first_sheet, :pointer,
           :col_options, :pointer,
           :col_options_max, :ushort,
           :col_sizes, :pointer,
           :col_sizes_max, :ushort,
           :col_formats, :pointer,
           :col_formats_max, :ushort,
           :col_size_changed, :uchar,
           :row_size_changed, :uchar,
           :optimize, :uchar,
           :optimize_row, :pointer,
           :fit_height, :ushort,
           :fit_width, :ushort,
           :horizontal_dpi, :ushort,
           :hlink_count, :ushort,
           :page_start, :ushort,
           :print_scale, :ushort,
           :rel_count, :ushort,
           :vertical_dpi, :ushort,
           :zoom, :ushort,
           :filter_on, :uchar,
           :fit_page, :uchar,
           :hcenter, :uchar,
           :orientation, :uchar,
           :outline_changed, :uchar,
           :outline_on, :uchar,
           :outline_style, :uchar,
           :outline_below, :uchar,
           :outline_right, :uchar,
           :page_order, :uchar,
           :page_setup_changed, :uchar,
           :page_view, :uchar,
           :paper_size, :uchar,
           :print_gridlines, :uchar,
           :print_headers, :uchar,
           :print_options_changed, :uchar,
           :right_to_left, :uchar,
           :screen_gridlines, :uchar,
           :show_zeros, :uchar,
           :vba_codename, :uchar,
           :vcenter, :uchar,
           :zoom_scale_normal, :uchar,
           :num_validations, :uchar,
           :tab_color, :int,
           :margin_left, :double,
           :margin_right, :double,
           :margin_top, :double,
           :margin_bottom, :double,
           :margin_header, :double,
           :margin_footer, :double,
           :default_row_height, :double,
           :default_row_pixels, :uint,
           :default_col_pixels, :uint,
           :default_row_zeroed, :uchar,
           :default_row_set, :uchar,
           :outline_row_level, :uchar,
           :outline_col_level, :uchar,
           :header_footer_changed, :uchar,
           :header, [:char, 255],
           :footer, [:char, 255],
           :repeat_rows, RepeatRows.by_value,
           :repeat_cols, RepeatCols.by_value,
           :print_area, PrintArea.by_value,
           :autofilter, Autofilter.by_value,
           :merged_range_count, :ushort,
           :hbreaks, :pointer,
           :vbreaks, :pointer,
           :hbreaks_count, :ushort,
           :vbreaks_count, :ushort,
           :external_hyperlinks, :pointer,
           :external_drawing_links, :pointer,
           :drawing_links, :pointer,
           :panes, Panes.by_value,
           :protection, Protection.by_value,
           :drawing, Drawing,
           :list_pointers, WorksheetListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :index ::
  #   (Integer) 
  # :hidden ::
  #   (Integer) 
  # :optimize ::
  #   (Integer) 
  # :active_sheet ::
  #   (FFI::Pointer(*Uint16T)) 
  # :first_sheet ::
  #   (FFI::Pointer(*Uint16T)) 
  # :sst ::
  #   (Sst) 
  # :name ::
  #   (String) 
  # :quoted_name ::
  #   (String) 
  # :tmpdir ::
  #   (String) 
  class WorksheetInitData < FFI::Struct
    layout :index, :uint,
           :hidden, :uchar,
           :optimize, :uchar,
           :active_sheet, :pointer,
           :first_sheet, :pointer,
           :sst, Sst,
           :name, :string,
           :quoted_name, :string,
           :tmpdir, :string
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :rbe_left ::
  #   (FFI::Pointer(*Row)) 
  # :rbe_right ::
  #   (FFI::Pointer(*Row)) 
  # :rbe_parent ::
  #   (FFI::Pointer(*Row)) 
  # :rbe_color ::
  #   (Integer) 
  class RowTreePointers < FFI::Struct
    layout :rbe_left, :pointer,
           :rbe_right, :pointer,
           :rbe_parent, :pointer,
           :rbe_color, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :row_num ::
  #   (Integer) 
  # :height ::
  #   (Float) 
  # :format ::
  #   (Format) 
  # :hidden ::
  #   (Integer) 
  # :level ::
  #   (Integer) 
  # :collapsed ::
  #   (Integer) 
  # :row_changed ::
  #   (Integer) 
  # :data_changed ::
  #   (Integer) 
  # :height_changed ::
  #   (Integer) 
  # :cells ::
  #   (TableCells) 
  # :tree_pointers ::
  #   (RowTreePointers) 
  class Row < FFI::Struct
    layout :row_num, :uint,
           :height, :double,
           :format, Format,
           :hidden, :uchar,
           :level, :uchar,
           :collapsed, :uchar,
           :row_changed, :uchar,
           :data_changed, :uchar,
           :height_changed, :uchar,
           :cells, TableCells,
           :tree_pointers, RowTreePointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :number ::
  #   (Float) 
  # :string_id ::
  #   (Integer) 
  # :string ::
  #   (String) 
  class CellU < FFI::Union
    layout :number, :double,
           :string_id, :int,
           :string, :string
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :rbe_left ::
  #   (FFI::Pointer(*Cell)) 
  # :rbe_right ::
  #   (FFI::Pointer(*Cell)) 
  # :rbe_parent ::
  #   (FFI::Pointer(*Cell)) 
  # :rbe_color ::
  #   (Integer) 
  class CellTreePointers < FFI::Struct
    layout :rbe_left, :pointer,
           :rbe_right, :pointer,
           :rbe_parent, :pointer,
           :rbe_color, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :row_num ::
  #   (Integer) 
  # :col_num ::
  #   (Integer) 
  # :type ::
  #   (Symbol from _enum_cell_types_) 
  # :format ::
  #   (Format) 
  # :u ::
  #   (CellU) 
  # :formula_result ::
  #   (Float) 
  # :user_data1 ::
  #   (String) 
  # :user_data2 ::
  #   (String) 
  # :sst_string ::
  #   (String) 
  # :tree_pointers ::
  #   (CellTreePointers) 
  class Cell < FFI::Struct
    layout :row_num, :uint,
           :col_num, :ushort,
           :type, :cell_types,
           :format, Format,
           :u, CellU.by_value,
           :formula_result, :double,
           :user_data1, :string,
           :user_data2, :string,
           :sst_string, :string,
           :tree_pointers, CellTreePointers.by_value
  end
  
  # (Not documented)
  # 
  # @method worksheet_write_number(worksheet, row, col, number, format)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [Float] number 
  # @param [Format] format 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_write_number, :worksheet_write_number, [Worksheet, :uint, :ushort, :double, Format], :error
  
  # (Not documented)
  # 
  # @method worksheet_write_string(worksheet, row, col, string, format)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [String] string 
  # @param [Format] format 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_write_string, :worksheet_write_string, [Worksheet, :uint, :ushort, :string, Format], :error
  
  # (Not documented)
  # 
  # @method worksheet_write_formula(worksheet, row, col, formula, format)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [String] formula 
  # @param [Format] format 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_write_formula, :worksheet_write_formula, [Worksheet, :uint, :ushort, :string, Format], :error
  
  # (Not documented)
  # 
  # @method worksheet_write_array_formula(worksheet, first_row, first_col, last_row, last_col, formula, format)
  # @param [Worksheet] worksheet 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] last_row 
  # @param [Integer] last_col 
  # @param [String] formula 
  # @param [Format] format 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_write_array_formula, :worksheet_write_array_formula, [Worksheet, :uint, :ushort, :uint, :ushort, :string, Format], :error
  
  # (Not documented)
  # 
  # @method worksheet_write_array_formula_num(worksheet, first_row, first_col, last_row, last_col, formula, format, result)
  # @param [Worksheet] worksheet 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] last_row 
  # @param [Integer] last_col 
  # @param [String] formula 
  # @param [Format] format 
  # @param [Float] result 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_write_array_formula_num, :worksheet_write_array_formula_num, [Worksheet, :uint, :ushort, :uint, :ushort, :string, Format, :double], :error
  
  # (Not documented)
  # 
  # @method worksheet_write_datetime(worksheet, row, col, datetime, format)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [Datetime] datetime 
  # @param [Format] format 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_write_datetime, :worksheet_write_datetime, [Worksheet, :uint, :ushort, Datetime, Format], :error
  
  # (Not documented)
  # 
  # @method worksheet_write_url_opt(worksheet, row_num, col_num, url, format, string, tooltip)
  # @param [Worksheet] worksheet 
  # @param [Integer] row_num 
  # @param [Integer] col_num 
  # @param [String] url 
  # @param [Format] format 
  # @param [String] string 
  # @param [String] tooltip 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_write_url_opt, :worksheet_write_url_opt, [Worksheet, :uint, :ushort, :string, Format, :string, :string], :error
  
  # (Not documented)
  # 
  # @method worksheet_write_url(worksheet, row, col, url, format)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [String] url 
  # @param [Format] format 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_write_url, :worksheet_write_url, [Worksheet, :uint, :ushort, :string, Format], :error
  
  # (Not documented)
  # 
  # @method worksheet_write_boolean(worksheet, row, col, value, format)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [Integer] value 
  # @param [Format] format 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_write_boolean, :worksheet_write_boolean, [Worksheet, :uint, :ushort, :int, Format], :error
  
  # (Not documented)
  # 
  # @method worksheet_write_blank(worksheet, row, col, format)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [Format] format 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_write_blank, :worksheet_write_blank, [Worksheet, :uint, :ushort, Format], :error
  
  # (Not documented)
  # 
  # @method worksheet_write_formula_num(worksheet, row, col, formula, format, result)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [String] formula 
  # @param [Format] format 
  # @param [Float] result 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_write_formula_num, :worksheet_write_formula_num, [Worksheet, :uint, :ushort, :string, Format, :double], :error
  
  # (Not documented)
  # 
  # @method worksheet_set_row(worksheet, row, height, format)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Float] height 
  # @param [Format] format 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_set_row, :worksheet_set_row, [Worksheet, :uint, :double, Format], :error
  
  # (Not documented)
  # 
  # @method worksheet_set_row_opt(worksheet, row, height, format, options)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Float] height 
  # @param [Format] format 
  # @param [RowColOptions] options 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_set_row_opt, :worksheet_set_row_opt, [Worksheet, :uint, :double, Format, RowColOptions], :error
  
  # (Not documented)
  # 
  # @method worksheet_set_column(worksheet, first_col, last_col, width, format)
  # @param [Worksheet] worksheet 
  # @param [Integer] first_col 
  # @param [Integer] last_col 
  # @param [Float] width 
  # @param [Format] format 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_set_column, :worksheet_set_column, [Worksheet, :ushort, :ushort, :double, Format], :error
  
  # (Not documented)
  # 
  # @method worksheet_set_column_opt(worksheet, first_col, last_col, width, format, options)
  # @param [Worksheet] worksheet 
  # @param [Integer] first_col 
  # @param [Integer] last_col 
  # @param [Float] width 
  # @param [Format] format 
  # @param [RowColOptions] options 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_set_column_opt, :worksheet_set_column_opt, [Worksheet, :ushort, :ushort, :double, Format, RowColOptions], :error
  
  # (Not documented)
  # 
  # @method worksheet_insert_image(worksheet, row, col, filename)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [String] filename 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_insert_image, :worksheet_insert_image, [Worksheet, :uint, :ushort, :string], :error
  
  # (Not documented)
  # 
  # @method worksheet_insert_image_opt(worksheet, row, col, filename, options)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [String] filename 
  # @param [ImageOptions] options 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_insert_image_opt, :worksheet_insert_image_opt, [Worksheet, :uint, :ushort, :string, ImageOptions], :error
  
  # (Not documented)
  # 
  # @method worksheet_insert_chart(worksheet, row, col, chart)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [Chart] chart 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_insert_chart, :worksheet_insert_chart, [Worksheet, :uint, :ushort, Chart], :error
  
  # (Not documented)
  # 
  # @method worksheet_insert_chart_opt(worksheet, row, col, chart, user_options)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [Chart] chart 
  # @param [ImageOptions] user_options 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_insert_chart_opt, :worksheet_insert_chart_opt, [Worksheet, :uint, :ushort, Chart, ImageOptions], :error
  
  # (Not documented)
  # 
  # @method worksheet_merge_range(worksheet, first_row, first_col, last_row, last_col, string, format)
  # @param [Worksheet] worksheet 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] last_row 
  # @param [Integer] last_col 
  # @param [String] string 
  # @param [Format] format 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_merge_range, :worksheet_merge_range, [Worksheet, :uint, :ushort, :uint, :ushort, :string, Format], :error
  
  # (Not documented)
  # 
  # @method worksheet_autofilter(worksheet, first_row, first_col, last_row, last_col)
  # @param [Worksheet] worksheet 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] last_row 
  # @param [Integer] last_col 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_autofilter, :worksheet_autofilter, [Worksheet, :uint, :ushort, :uint, :ushort], :error
  
  # (Not documented)
  # 
  # @method worksheet_data_validation_cell(worksheet, row, col, validation)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @param [DataValidation] validation 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_data_validation_cell, :worksheet_data_validation_cell, [Worksheet, :uint, :ushort, DataValidation], :error
  
  # (Not documented)
  # 
  # @method worksheet_data_validation_range(worksheet, first_row, first_col, last_row, last_col, validation)
  # @param [Worksheet] worksheet 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] last_row 
  # @param [Integer] last_col 
  # @param [DataValidation] validation 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_data_validation_range, :worksheet_data_validation_range, [Worksheet, :uint, :ushort, :uint, :ushort, DataValidation], :error
  
  # (Not documented)
  # 
  # @method worksheet_activate(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_activate, :worksheet_activate, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_select(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_select, :worksheet_select, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_hide(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_hide, :worksheet_hide, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_first_sheet(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_set_first_sheet, :worksheet_set_first_sheet, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_freeze_panes(worksheet, row, col)
  # @param [Worksheet] worksheet 
  # @param [Integer] row 
  # @param [Integer] col 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_freeze_panes, :worksheet_freeze_panes, [Worksheet, :uint, :ushort], :void
  
  # (Not documented)
  # 
  # @method worksheet_split_panes(worksheet, vertical, horizontal)
  # @param [Worksheet] worksheet 
  # @param [Float] vertical 
  # @param [Float] horizontal 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_split_panes, :worksheet_split_panes, [Worksheet, :double, :double], :void
  
  # (Not documented)
  # 
  # @method worksheet_freeze_panes_opt(worksheet, first_row, first_col, top_row, left_col, type)
  # @param [Worksheet] worksheet 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] top_row 
  # @param [Integer] left_col 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_freeze_panes_opt, :worksheet_freeze_panes_opt, [Worksheet, :uint, :ushort, :uint, :ushort, :uchar], :void
  
  # (Not documented)
  # 
  # @method worksheet_split_panes_opt(worksheet, vertical, horizontal, top_row, left_col)
  # @param [Worksheet] worksheet 
  # @param [Float] vertical 
  # @param [Float] horizontal 
  # @param [Integer] top_row 
  # @param [Integer] left_col 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_split_panes_opt, :worksheet_split_panes_opt, [Worksheet, :double, :double, :uint, :ushort], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_selection(worksheet, first_row, first_col, last_row, last_col)
  # @param [Worksheet] worksheet 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] last_row 
  # @param [Integer] last_col 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_set_selection, :worksheet_set_selection, [Worksheet, :uint, :ushort, :uint, :ushort], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_landscape(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_set_landscape, :worksheet_set_landscape, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_portrait(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_set_portrait, :worksheet_set_portrait, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_page_view(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_set_page_view, :worksheet_set_page_view, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_paper(worksheet, paper_type)
  # @param [Worksheet] worksheet 
  # @param [Integer] paper_type 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_set_paper, :worksheet_set_paper, [Worksheet, :uchar], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_margins(worksheet, left, right, top, bottom)
  # @param [Worksheet] worksheet 
  # @param [Float] left 
  # @param [Float] right 
  # @param [Float] top 
  # @param [Float] bottom 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_set_margins, :worksheet_set_margins, [Worksheet, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_header(worksheet, string)
  # @param [Worksheet] worksheet 
  # @param [String] string 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_set_header, :worksheet_set_header, [Worksheet, :string], :error
  
  # (Not documented)
  # 
  # @method worksheet_set_footer(worksheet, string)
  # @param [Worksheet] worksheet 
  # @param [String] string 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_set_footer, :worksheet_set_footer, [Worksheet, :string], :error
  
  # (Not documented)
  # 
  # @method worksheet_set_header_opt(worksheet, string, options)
  # @param [Worksheet] worksheet 
  # @param [String] string 
  # @param [HeaderFooterOptions] options 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_set_header_opt, :worksheet_set_header_opt, [Worksheet, :string, HeaderFooterOptions], :error
  
  # (Not documented)
  # 
  # @method worksheet_set_footer_opt(worksheet, string, options)
  # @param [Worksheet] worksheet 
  # @param [String] string 
  # @param [HeaderFooterOptions] options 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_set_footer_opt, :worksheet_set_footer_opt, [Worksheet, :string, HeaderFooterOptions], :error
  
  # (Not documented)
  # 
  # @method worksheet_set_h_pagebreaks(worksheet, breaks)
  # @param [Worksheet] worksheet 
  # @param [FFI::Pointer(*U_int)] breaks 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_set_h_pagebreaks, :worksheet_set_h_pagebreaks, [Worksheet, :pointer], :error
  
  # (Not documented)
  # 
  # @method worksheet_set_v_pagebreaks(worksheet, breaks)
  # @param [Worksheet] worksheet 
  # @param [FFI::Pointer(*U_short)] breaks 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_set_v_pagebreaks, :worksheet_set_v_pagebreaks, [Worksheet, :pointer], :error
  
  # (Not documented)
  # 
  # @method worksheet_print_across(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_print_across, :worksheet_print_across, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_zoom(worksheet, scale)
  # @param [Worksheet] worksheet 
  # @param [Integer] scale 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_set_zoom, :worksheet_set_zoom, [Worksheet, :ushort], :void
  
  # (Not documented)
  # 
  # @method worksheet_gridlines(worksheet, option)
  # @param [Worksheet] worksheet 
  # @param [Integer] option 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_gridlines, :worksheet_gridlines, [Worksheet, :uchar], :void
  
  # (Not documented)
  # 
  # @method worksheet_center_horizontally(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_center_horizontally, :worksheet_center_horizontally, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_center_vertically(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_center_vertically, :worksheet_center_vertically, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_print_row_col_headers(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_print_row_col_headers, :worksheet_print_row_col_headers, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_repeat_rows(worksheet, first_row, last_row)
  # @param [Worksheet] worksheet 
  # @param [Integer] first_row 
  # @param [Integer] last_row 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_repeat_rows, :worksheet_repeat_rows, [Worksheet, :uint, :uint], :error
  
  # (Not documented)
  # 
  # @method worksheet_repeat_columns(worksheet, first_col, last_col)
  # @param [Worksheet] worksheet 
  # @param [Integer] first_col 
  # @param [Integer] last_col 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_repeat_columns, :worksheet_repeat_columns, [Worksheet, :ushort, :ushort], :error
  
  # (Not documented)
  # 
  # @method worksheet_print_area(worksheet, first_row, first_col, last_row, last_col)
  # @param [Worksheet] worksheet 
  # @param [Integer] first_row 
  # @param [Integer] first_col 
  # @param [Integer] last_row 
  # @param [Integer] last_col 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :worksheet_print_area, :worksheet_print_area, [Worksheet, :uint, :ushort, :uint, :ushort], :error
  
  # (Not documented)
  # 
  # @method worksheet_fit_to_pages(worksheet, width, height)
  # @param [Worksheet] worksheet 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_fit_to_pages, :worksheet_fit_to_pages, [Worksheet, :ushort, :ushort], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_start_page(worksheet, start_page)
  # @param [Worksheet] worksheet 
  # @param [Integer] start_page 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_set_start_page, :worksheet_set_start_page, [Worksheet, :ushort], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_print_scale(worksheet, scale)
  # @param [Worksheet] worksheet 
  # @param [Integer] scale 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_set_print_scale, :worksheet_set_print_scale, [Worksheet, :ushort], :void
  
  # (Not documented)
  # 
  # @method worksheet_right_to_left(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_right_to_left, :worksheet_right_to_left, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_hide_zero(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_hide_zero, :worksheet_hide_zero, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_tab_color(worksheet, color)
  # @param [Worksheet] worksheet 
  # @param [Integer] color 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_set_tab_color, :worksheet_set_tab_color, [Worksheet, :int], :void
  
  # (Not documented)
  # 
  # @method worksheet_protect(worksheet, password, options)
  # @param [Worksheet] worksheet 
  # @param [String] password 
  # @param [Protection] options 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_protect, :worksheet_protect, [Worksheet, :string, Protection], :void
  
  # (Not documented)
  # 
  # @method worksheet_outline_settings(worksheet, visible, symbols_below, symbols_right, auto_style)
  # @param [Worksheet] worksheet 
  # @param [Integer] visible 
  # @param [Integer] symbols_below 
  # @param [Integer] symbols_right 
  # @param [Integer] auto_style 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_outline_settings, :worksheet_outline_settings, [Worksheet, :uchar, :uchar, :uchar, :uchar], :void
  
  # (Not documented)
  # 
  # @method worksheet_set_default_row(worksheet, height, hide_unused_rows)
  # @param [Worksheet] worksheet 
  # @param [Float] height 
  # @param [Integer] hide_unused_rows 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_set_default_row, :worksheet_set_default_row, [Worksheet, :double, :uchar], :void
  
  # (Not documented)
  # 
  # @method worksheet_new(init_data)
  # @param [WorksheetInitData] init_data 
  # @return [Worksheet] 
  # @scope class
  attach_function :worksheet_new, :lxw_worksheet_new, [WorksheetInitData], Worksheet
  
  # (Not documented)
  # 
  # @method worksheet_free(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_free, :lxw_worksheet_free, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_assemble_xml_file(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_assemble_xml_file, :lxw_worksheet_assemble_xml_file, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_write_single_row(worksheet)
  # @param [Worksheet] worksheet 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_write_single_row, :lxw_worksheet_write_single_row, [Worksheet], :void
  
  # (Not documented)
  # 
  # @method worksheet_prepare_image(worksheet, image_ref_id, drawing_id, image_data)
  # @param [Worksheet] worksheet 
  # @param [Integer] image_ref_id 
  # @param [Integer] drawing_id 
  # @param [ImageOptions] image_data 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_prepare_image, :lxw_worksheet_prepare_image, [Worksheet, :ushort, :ushort, ImageOptions], :void
  
  # (Not documented)
  # 
  # @method worksheet_prepare_chart(worksheet, chart_ref_id, drawing_id, image_data)
  # @param [Worksheet] worksheet 
  # @param [Integer] chart_ref_id 
  # @param [Integer] drawing_id 
  # @param [ImageOptions] image_data 
  # @return [nil] 
  # @scope class
  attach_function :worksheet_prepare_chart, :lxw_worksheet_prepare_chart, [Worksheet, :ushort, :ushort, ImageOptions], :void
  
  # (Not documented)
  # 
  # @method worksheet_find_row(worksheet, row_num)
  # @param [Worksheet] worksheet 
  # @param [Integer] row_num 
  # @return [Row] 
  # @scope class
  attach_function :worksheet_find_row, :lxw_worksheet_find_row, [Worksheet, :uint], Row
  
  # (Not documented)
  # 
  # @method worksheet_find_cell(row, col_num)
  # @param [Row] row 
  # @param [Integer] col_num 
  # @return [Cell] 
  # @scope class
  attach_function :worksheet_find_cell, :lxw_worksheet_find_cell, [Row, :ushort], Cell
  
  # (Not documented)
  # 
  # = Fields:
  # :rbh_root ::
  #   (FFI::Pointer(*WorksheetName)) 
  class WorksheetNames < FFI::Struct
    layout :rbh_root, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (Worksheet) 
  # :stqh_last ::
  #   (FFI::Pointer(**Worksheet)) 
  class Worksheets < FFI::Struct
    layout :stqh_first, Worksheet,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (Chart) 
  # :stqh_last ::
  #   (FFI::Pointer(**Chart)) 
  class Charts < FFI::Struct
    layout :stqh_first, Chart,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :tqh_first ::
  #   (FFI::Pointer(*DefinedName)) 
  # :tqh_last ::
  #   (FFI::Pointer(**DefinedName)) 
  class DefinedNames < FFI::Struct
    layout :tqh_first, :pointer,
           :tqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :rbe_left ::
  #   (FFI::Pointer(*WorksheetName)) 
  # :rbe_right ::
  #   (FFI::Pointer(*WorksheetName)) 
  # :rbe_parent ::
  #   (FFI::Pointer(*WorksheetName)) 
  # :rbe_color ::
  #   (Integer) 
  class WorksheetNameTreePointers < FFI::Struct
    layout :rbe_left, :pointer,
           :rbe_right, :pointer,
           :rbe_parent, :pointer,
           :rbe_color, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :name ::
  #   (String) 
  # :worksheet ::
  #   (Worksheet) 
  # :tree_pointers ::
  #   (WorksheetNameTreePointers) 
  class WorksheetName < FFI::Struct
    layout :name, :string,
           :worksheet, Worksheet,
           :tree_pointers, WorksheetNameTreePointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :tqe_next ::
  #   (FFI::Pointer(*DefinedName)) 
  # :tqe_prev ::
  #   (FFI::Pointer(**DefinedName)) 
  class DefinedNameListPointers < FFI::Struct
    layout :tqe_next, :pointer,
           :tqe_prev, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :index ::
  #   (Integer) 
  # :hidden ::
  #   (Integer) 
  # :name ::
  #   (Array<Integer>) 
  # :app_name ::
  #   (Array<Integer>) 
  # :formula ::
  #   (Array<Integer>) 
  # :normalised_name ::
  #   (Array<Integer>) 
  # :normalised_sheetname ::
  #   (Array<Integer>) 
  # :list_pointers ::
  #   (DefinedNameListPointers) 
  class DefinedName < FFI::Struct
    layout :index, :short,
           :hidden, :uchar,
           :name, [:char, 128],
           :app_name, [:char, 128],
           :formula, [:char, 128],
           :normalised_name, [:char, 128],
           :normalised_sheetname, [:char, 128],
           :list_pointers, DefinedNameListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :title ::
  #   (String) The title of the Excel Document.
  # :subject ::
  #   (String) The subject of the Excel Document.
  # :author ::
  #   (String) The author of the Excel Document.
  # :manager ::
  #   (String) The manager field of the Excel Document.
  # :company ::
  #   (String) The company field of the Excel Document.
  # :category ::
  #   (String) The category of the Excel Document.
  # :keywords ::
  #   (String) The keywords of the Excel Document.
  # :comments ::
  #   (String) The comment field of the Excel Document.
  # :status ::
  #   (String) The status of the Excel Document.
  # :hyperlink_base ::
  #   (String) The hyperlink base url of the Excel Document.
  # :created ::
  #   (Integer) 
  class DocProperties < FFI::Struct
    layout :title, :string,
           :subject, :string,
           :author, :string,
           :manager, :string,
           :company, :string,
           :category, :string,
           :keywords, :string,
           :comments, :string,
           :status, :string,
           :hyperlink_base, :string,
           :created, :long
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :constant_memory ::
  #   (Integer) Optimize the workbook to use constant memory for worksheets
  # :tmpdir ::
  #   (String) Directory to use for the temporary files created by libxlsxwriter.
  class WorkbookOptions < FFI::Struct
    layout :constant_memory, :uchar,
           :tmpdir, :string
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :worksheets ::
  #   (Worksheets) 
  # :worksheet_names ::
  #   (WorksheetNames) 
  # :charts ::
  #   (Charts) 
  # :ordered_charts ::
  #   (Charts) 
  # :formats ::
  #   (Formats) 
  # :defined_names ::
  #   (DefinedNames) 
  # :sst ::
  #   (Sst) 
  # :properties ::
  #   (DocProperties) 
  # :custom_properties ::
  #   (CustomProperties) 
  # :filename ::
  #   (String) 
  # :options ::
  #   (WorkbookOptions) 
  # :num_sheets ::
  #   (Integer) 
  # :first_sheet ::
  #   (Integer) 
  # :active_sheet ::
  #   (Integer) 
  # :num_xf_formats ::
  #   (Integer) 
  # :num_format_count ::
  #   (Integer) 
  # :drawing_count ::
  #   (Integer) 
  # :font_count ::
  #   (Integer) 
  # :border_count ::
  #   (Integer) 
  # :fill_count ::
  #   (Integer) 
  # :optimize ::
  #   (Integer) 
  # :has_png ::
  #   (Integer) 
  # :has_jpeg ::
  #   (Integer) 
  # :has_bmp ::
  #   (Integer) 
  # :used_xf_formats ::
  #   (HashTable) 
  module WorkbookWrappers
    # @param [String] sheetname 
    # @return [Worksheet] 
    def add_worksheet(sheetname)
      Worksheet.new Libxlsxwriter.workbook_add_worksheet(self, sheetname)
    end
    
    # @return [Format] 
    def add_format()
      Format.new Libxlsxwriter.workbook_add_format(self)
    end
    
    # @return [Format] 
    def default_format()
      Format.new Libxlsxwriter.workbook_default_format(self)
    end
    
    # @param [Integer] chart_type 
    # @return [Chart] 
    def add_chart(chart_type)
      Chart.new Libxlsxwriter.workbook_add_chart(self, chart_type)
    end
    
    # @return [Symbol from _enum_error_] 
    def close()
      Libxlsxwriter.workbook_close(self)
    end
    
    # @param [DocProperties] properties 
    # @return [Symbol from _enum_error_] 
    def set_properties(properties)
      Libxlsxwriter.workbook_set_properties(self, properties)
    end
    
    # @param [String] name 
    # @param [String] value 
    # @return [Symbol from _enum_error_] 
    def set_custom_property_string(name, value)
      Libxlsxwriter.workbook_set_custom_property_string(self, name, value)
    end
    
    # @param [String] name 
    # @param [Float] value 
    # @return [Symbol from _enum_error_] 
    def set_custom_property_number(name, value)
      Libxlsxwriter.workbook_set_custom_property_number(self, name, value)
    end
    
    # @param [String] name 
    # @param [Integer] value 
    # @return [Symbol from _enum_error_] 
    def set_custom_property_integer(name, value)
      Libxlsxwriter.workbook_set_custom_property_integer(self, name, value)
    end
    
    # @param [String] name 
    # @param [Integer] value 
    # @return [Symbol from _enum_error_] 
    def set_custom_property_boolean(name, value)
      Libxlsxwriter.workbook_set_custom_property_boolean(self, name, value)
    end
    
    # @param [String] name 
    # @param [Datetime] datetime 
    # @return [Symbol from _enum_error_] 
    def set_custom_property_datetime(name, datetime)
      Libxlsxwriter.workbook_set_custom_property_datetime(self, name, datetime)
    end
    
    # @param [String] name 
    # @param [String] formula 
    # @return [Symbol from _enum_error_] 
    def define_name(name, formula)
      Libxlsxwriter.workbook_define_name(self, name, formula)
    end
    
    # @param [String] name 
    # @return [Worksheet] 
    def get_worksheet_by_name(name)
      Worksheet.new Libxlsxwriter.workbook_get_worksheet_by_name(self, name)
    end
    
    # @param [String] sheetname 
    # @return [Symbol from _enum_error_] 
    def validate_worksheet_name(sheetname)
      Libxlsxwriter.workbook_validate_worksheet_name(self, sheetname)
    end
    
    # @return [nil] 
    def free()
      Libxlsxwriter.workbook_free(self)
    end
    
    # @return [nil] 
    def assemble_xml_file()
      Libxlsxwriter.workbook_assemble_xml_file(self)
    end
    
    # @return [nil] 
    def set_default_xf_indices()
      Libxlsxwriter.workbook_set_default_xf_indices(self)
    end
  end
  
  class Workbook < FFI::Struct
    include WorkbookWrappers
    layout :file, :pointer,
           :worksheets, Worksheets,
           :worksheet_names, WorksheetNames,
           :charts, Charts,
           :ordered_charts, Charts,
           :formats, Formats,
           :defined_names, DefinedNames,
           :sst, Sst,
           :properties, DocProperties,
           :custom_properties, CustomProperties,
           :filename, :string,
           :options, WorkbookOptions.by_value,
           :num_sheets, :ushort,
           :first_sheet, :ushort,
           :active_sheet, :ushort,
           :num_xf_formats, :ushort,
           :num_format_count, :ushort,
           :drawing_count, :ushort,
           :font_count, :ushort,
           :border_count, :ushort,
           :fill_count, :ushort,
           :optimize, :uchar,
           :has_png, :uchar,
           :has_jpeg, :uchar,
           :has_bmp, :uchar,
           :used_xf_formats, HashTable
  end
  
  # (Not documented)
  # 
  # @method workbook_new(filename)
  # @param [String] filename 
  # @return [Workbook] 
  # @scope class
  attach_function :workbook_new, :workbook_new, [:string], Workbook
  
  # (Not documented)
  # 
  # @method workbook_new_opt(filename, options)
  # @param [String] filename 
  # @param [WorkbookOptions] options 
  # @return [Workbook] 
  # @scope class
  attach_function :workbook_new_opt, :workbook_new_opt, [:string, WorkbookOptions], Workbook
  
  # (Not documented)
  # 
  # @method new_workbook(filename)
  # @param [String] filename 
  # @return [Workbook] 
  # @scope class
  attach_function :new_workbook, :new_workbook, [:string], Workbook
  
  # (Not documented)
  # 
  # @method new_workbook_opt(filename, options)
  # @param [String] filename 
  # @param [WorkbookOptions] options 
  # @return [Workbook] 
  # @scope class
  attach_function :new_workbook_opt, :new_workbook_opt, [:string, WorkbookOptions], Workbook
  
  # (Not documented)
  # 
  # @method workbook_add_worksheet(workbook, sheetname)
  # @param [Workbook] workbook 
  # @param [String] sheetname 
  # @return [Worksheet] 
  # @scope class
  attach_function :workbook_add_worksheet, :workbook_add_worksheet, [Workbook, :string], Worksheet
  
  # (Not documented)
  # 
  # @method workbook_add_format(workbook)
  # @param [Workbook] workbook 
  # @return [Format] 
  # @scope class
  attach_function :workbook_add_format, :workbook_add_format, [Workbook], Format
  
  # (Not documented)
  # 
  # @method workbook_default_format(workbook)
  # @param [Workbook] workbook 
  # @return [Format] 
  # @scope class
  attach_function :workbook_default_format, :workbook_default_format, [Workbook], Format
  
  # (Not documented)
  # 
  # @method workbook_add_chart(workbook, chart_type)
  # @param [Workbook] workbook 
  # @param [Integer] chart_type 
  # @return [Chart] 
  # @scope class
  attach_function :workbook_add_chart, :workbook_add_chart, [Workbook, :uchar], Chart
  
  # (Not documented)
  # 
  # @method workbook_close(workbook)
  # @param [Workbook] workbook 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :workbook_close, :workbook_close, [Workbook], :error
  
  # (Not documented)
  # 
  # @method workbook_set_properties(workbook, properties)
  # @param [Workbook] workbook 
  # @param [DocProperties] properties 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :workbook_set_properties, :workbook_set_properties, [Workbook, DocProperties], :error
  
  # (Not documented)
  # 
  # @method workbook_set_custom_property_string(workbook, name, value)
  # @param [Workbook] workbook 
  # @param [String] name 
  # @param [String] value 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :workbook_set_custom_property_string, :workbook_set_custom_property_string, [Workbook, :string, :string], :error
  
  # (Not documented)
  # 
  # @method workbook_set_custom_property_number(workbook, name, value)
  # @param [Workbook] workbook 
  # @param [String] name 
  # @param [Float] value 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :workbook_set_custom_property_number, :workbook_set_custom_property_number, [Workbook, :string, :double], :error
  
  # (Not documented)
  # 
  # @method workbook_set_custom_property_integer(workbook, name, value)
  # @param [Workbook] workbook 
  # @param [String] name 
  # @param [Integer] value 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :workbook_set_custom_property_integer, :workbook_set_custom_property_integer, [Workbook, :string, :int], :error
  
  # (Not documented)
  # 
  # @method workbook_set_custom_property_boolean(workbook, name, value)
  # @param [Workbook] workbook 
  # @param [String] name 
  # @param [Integer] value 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :workbook_set_custom_property_boolean, :workbook_set_custom_property_boolean, [Workbook, :string, :uchar], :error
  
  # (Not documented)
  # 
  # @method workbook_set_custom_property_datetime(workbook, name, datetime)
  # @param [Workbook] workbook 
  # @param [String] name 
  # @param [Datetime] datetime 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :workbook_set_custom_property_datetime, :workbook_set_custom_property_datetime, [Workbook, :string, Datetime], :error
  
  # (Not documented)
  # 
  # @method workbook_define_name(workbook, name, formula)
  # @param [Workbook] workbook 
  # @param [String] name 
  # @param [String] formula 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :workbook_define_name, :workbook_define_name, [Workbook, :string, :string], :error
  
  # (Not documented)
  # 
  # @method workbook_get_worksheet_by_name(workbook, name)
  # @param [Workbook] workbook 
  # @param [String] name 
  # @return [Worksheet] 
  # @scope class
  attach_function :workbook_get_worksheet_by_name, :workbook_get_worksheet_by_name, [Workbook, :string], Worksheet
  
  # (Not documented)
  # 
  # @method workbook_validate_worksheet_name(workbook, sheetname)
  # @param [Workbook] workbook 
  # @param [String] sheetname 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :workbook_validate_worksheet_name, :workbook_validate_worksheet_name, [Workbook, :string], :error
  
  # (Not documented)
  # 
  # @method workbook_free(workbook)
  # @param [Workbook] workbook 
  # @return [nil] 
  # @scope class
  attach_function :workbook_free, :lxw_workbook_free, [Workbook], :void
  
  # (Not documented)
  # 
  # @method workbook_assemble_xml_file(workbook)
  # @param [Workbook] workbook 
  # @return [nil] 
  # @scope class
  attach_function :workbook_assemble_xml_file, :lxw_workbook_assemble_xml_file, [Workbook], :void
  
  # (Not documented)
  # 
  # @method workbook_set_default_xf_indices(workbook)
  # @param [Workbook] workbook 
  # @return [nil] 
  # @scope class
  attach_function :workbook_set_default_xf_indices, :lxw_workbook_set_default_xf_indices, [Workbook], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  module ThemeWrappers
    # @return [nil] 
    def free()
      Libxlsxwriter.theme_free(self)
    end
    
    # @return [nil] 
    def xml_declaration()
      Libxlsxwriter.theme_xml_declaration(self)
    end
    
    # @return [nil] 
    def assemble_xml_file()
      Libxlsxwriter.theme_assemble_xml_file(self)
    end
  end
  
  class Theme < FFI::Struct
    include ThemeWrappers
    layout :file, :pointer
  end
  
  # (Not documented)
  # 
  # @method theme_new()
  # @return [Theme] 
  # @scope class
  attach_function :theme_new, :lxw_theme_new, [], Theme
  
  # (Not documented)
  # 
  # @method theme_free(theme)
  # @param [Theme] theme 
  # @return [nil] 
  # @scope class
  attach_function :theme_free, :lxw_theme_free, [Theme], :void
  
  # (Not documented)
  # 
  # @method theme_xml_declaration(self_)
  # @param [Theme] self_ 
  # @return [nil] 
  # @scope class
  attach_function :theme_xml_declaration, :lxw_theme_xml_declaration, [Theme], :void
  
  # (Not documented)
  # 
  # @method theme_assemble_xml_file(self_)
  # @param [Theme] self_ 
  # @return [nil] 
  # @scope class
  attach_function :theme_assemble_xml_file, :lxw_theme_assemble_xml_file, [Theme], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :custom_properties ::
  #   (CustomProperties) 
  # :pid ::
  #   (Integer) 
  module CustomWrappers
    # @return [nil] 
    def free()
      Libxlsxwriter.custom_free(self)
    end
    
    # @return [nil] 
    def assemble_xml_file()
      Libxlsxwriter.custom_assemble_xml_file(self)
    end
  end
  
  class Custom < FFI::Struct
    include CustomWrappers
    layout :file, :pointer,
           :custom_properties, CustomProperties,
           :pid, :uint
  end
  
  # (Not documented)
  # 
  # @method custom_new()
  # @return [Custom] 
  # @scope class
  attach_function :custom_new, :lxw_custom_new, [], Custom
  
  # (Not documented)
  # 
  # @method custom_free(custom)
  # @param [Custom] custom 
  # @return [nil] 
  # @scope class
  attach_function :custom_free, :lxw_custom_free, [Custom], :void
  
  # (Not documented)
  # 
  # @method custom_assemble_xml_file(self_)
  # @param [Custom] self_ 
  # @return [nil] 
  # @scope class
  attach_function :custom_assemble_xml_file, :lxw_custom_assemble_xml_file, [Custom], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :properties ::
  #   (DocProperties) 
  module CoreWrappers
    # @return [nil] 
    def free()
      Libxlsxwriter.core_free(self)
    end
    
    # @return [nil] 
    def assemble_xml_file()
      Libxlsxwriter.core_assemble_xml_file(self)
    end
  end
  
  class Core < FFI::Struct
    include CoreWrappers
    layout :file, :pointer,
           :properties, DocProperties
  end
  
  # (Not documented)
  # 
  # @method core_new()
  # @return [Core] 
  # @scope class
  attach_function :core_new, :lxw_core_new, [], Core
  
  # (Not documented)
  # 
  # @method core_free(core)
  # @param [Core] core 
  # @return [nil] 
  # @scope class
  attach_function :core_free, :lxw_core_free, [Core], :void
  
  # (Not documented)
  # 
  # @method core_assemble_xml_file(self_)
  # @param [Core] self_ 
  # @return [nil] 
  # @scope class
  attach_function :core_assemble_xml_file, :lxw_core_assemble_xml_file, [Core], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :default_types ::
  #   (Tuples) 
  # :overrides ::
  #   (Tuples) 
  module ContentTypesWrappers
    # @return [nil] 
    def free()
      Libxlsxwriter.content_types_free(self)
    end
    
    # @return [nil] 
    def assemble_xml_file()
      Libxlsxwriter.content_types_assemble_xml_file(self)
    end
  end
  
  class ContentTypes < FFI::Struct
    include ContentTypesWrappers
    layout :file, :pointer,
           :default_types, Tuples,
           :overrides, Tuples
  end
  
  # (Not documented)
  # 
  # @method content_types_new()
  # @return [ContentTypes] 
  # @scope class
  attach_function :content_types_new, :lxw_content_types_new, [], ContentTypes
  
  # (Not documented)
  # 
  # @method content_types_free(content_types)
  # @param [ContentTypes] content_types 
  # @return [nil] 
  # @scope class
  attach_function :content_types_free, :lxw_content_types_free, [ContentTypes], :void
  
  # (Not documented)
  # 
  # @method content_types_assemble_xml_file(content_types)
  # @param [ContentTypes] content_types 
  # @return [nil] 
  # @scope class
  attach_function :content_types_assemble_xml_file, :lxw_content_types_assemble_xml_file, [ContentTypes], :void
  
  # (Not documented)
  # 
  # @method ct_add_default(content_types, key, value)
  # @param [ContentTypes] content_types 
  # @param [String] key 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :ct_add_default, :lxw_ct_add_default, [ContentTypes, :string, :string], :void
  
  # (Not documented)
  # 
  # @method ct_add_override(content_types, key, value)
  # @param [ContentTypes] content_types 
  # @param [String] key 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :ct_add_override, :lxw_ct_add_override, [ContentTypes, :string, :string], :void
  
  # (Not documented)
  # 
  # @method ct_add_worksheet_name(content_types, name)
  # @param [ContentTypes] content_types 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :ct_add_worksheet_name, :lxw_ct_add_worksheet_name, [ContentTypes, :string], :void
  
  # (Not documented)
  # 
  # @method ct_add_chart_name(content_types, name)
  # @param [ContentTypes] content_types 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :ct_add_chart_name, :lxw_ct_add_chart_name, [ContentTypes, :string], :void
  
  # (Not documented)
  # 
  # @method ct_add_drawing_name(content_types, name)
  # @param [ContentTypes] content_types 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :ct_add_drawing_name, :lxw_ct_add_drawing_name, [ContentTypes, :string], :void
  
  # (Not documented)
  # 
  # @method ct_add_shared_strings(content_types)
  # @param [ContentTypes] content_types 
  # @return [nil] 
  # @scope class
  attach_function :ct_add_shared_strings, :lxw_ct_add_shared_strings, [ContentTypes], :void
  
  # (Not documented)
  # 
  # @method ct_add_calc_chain(content_types)
  # @param [ContentTypes] content_types 
  # @return [nil] 
  # @scope class
  attach_function :ct_add_calc_chain, :lxw_ct_add_calc_chain, [ContentTypes], :void
  
  # (Not documented)
  # 
  # @method ct_add_custom_properties(content_types)
  # @param [ContentTypes] content_types 
  # @return [nil] 
  # @scope class
  attach_function :ct_add_custom_properties, :lxw_ct_add_custom_properties, [ContentTypes], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*HeadingPair)) 
  # :stqh_last ::
  #   (FFI::Pointer(**HeadingPair)) 
  class HeadingPairs < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*PartName)) 
  # :stqh_last ::
  #   (FFI::Pointer(**PartName)) 
  class PartNames < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*HeadingPair)) 
  class HeadingPairListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :key ::
  #   (String) 
  # :value ::
  #   (String) 
  # :list_pointers ::
  #   (HeadingPairListPointers) 
  class HeadingPair < FFI::Struct
    layout :key, :string,
           :value, :string,
           :list_pointers, HeadingPairListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*PartName)) 
  class PartNameListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :name ::
  #   (String) 
  # :list_pointers ::
  #   (PartNameListPointers) 
  class PartName < FFI::Struct
    layout :name, :string,
           :list_pointers, PartNameListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :heading_pairs ::
  #   (HeadingPairs) 
  # :part_names ::
  #   (PartNames) 
  # :properties ::
  #   (DocProperties) 
  # :num_heading_pairs ::
  #   (Integer) 
  # :num_part_names ::
  #   (Integer) 
  module AppWrappers
    # @return [nil] 
    def free()
      Libxlsxwriter.app_free(self)
    end
    
    # @return [nil] 
    def assemble_xml_file()
      Libxlsxwriter.app_assemble_xml_file(self)
    end
    
    # @param [String] name 
    # @return [nil] 
    def add_part_name(name)
      Libxlsxwriter.app_add_part_name(self, name)
    end
    
    # @param [String] key 
    # @param [String] value 
    # @return [nil] 
    def add_heading_pair(key, value)
      Libxlsxwriter.app_add_heading_pair(self, key, value)
    end
  end
  
  class App < FFI::Struct
    include AppWrappers
    layout :file, :pointer,
           :heading_pairs, HeadingPairs,
           :part_names, PartNames,
           :properties, DocProperties,
           :num_heading_pairs, :uint,
           :num_part_names, :uint
  end
  
  # (Not documented)
  # 
  # @method app_new()
  # @return [App] 
  # @scope class
  attach_function :app_new, :lxw_app_new, [], App
  
  # (Not documented)
  # 
  # @method app_free(app)
  # @param [App] app 
  # @return [nil] 
  # @scope class
  attach_function :app_free, :lxw_app_free, [App], :void
  
  # (Not documented)
  # 
  # @method app_assemble_xml_file(self_)
  # @param [App] self_ 
  # @return [nil] 
  # @scope class
  attach_function :app_assemble_xml_file, :lxw_app_assemble_xml_file, [App], :void
  
  # (Not documented)
  # 
  # @method app_add_part_name(self_, name)
  # @param [App] self_ 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :app_add_part_name, :lxw_app_add_part_name, [App, :string], :void
  
  # (Not documented)
  # 
  # @method app_add_heading_pair(self_, key, value)
  # @param [App] self_ 
  # @param [String] key 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :app_add_heading_pair, :lxw_app_add_heading_pair, [App, :string, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :stqh_first ::
  #   (FFI::Pointer(*RelTuple)) 
  # :stqh_last ::
  #   (FFI::Pointer(**RelTuple)) 
  class RelTuples < FFI::Struct
    layout :stqh_first, :pointer,
           :stqh_last, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*RelTuple)) 
  class RelTupleListPointers < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :type ::
  #   (String) 
  # :target ::
  #   (String) 
  # :target_mode ::
  #   (String) 
  # :list_pointers ::
  #   (RelTupleListPointers) 
  class RelTuple < FFI::Struct
    layout :type, :string,
           :target, :string,
           :target_mode, :string,
           :list_pointers, RelTupleListPointers.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :rel_id ::
  #   (Integer) 
  # :relationships ::
  #   (RelTuples) 
  module RelationshipsWrappers
    # @return [nil] 
    def assemble_xml_file()
      Libxlsxwriter.relationships_assemble_xml_file(self)
    end
  end
  
  class Relationships < FFI::Struct
    include RelationshipsWrappers
    layout :file, :pointer,
           :rel_id, :uint,
           :relationships, RelTuples
  end
  
  # (Not documented)
  # 
  # @method relationships_new()
  # @return [Relationships] 
  # @scope class
  attach_function :relationships_new, :lxw_relationships_new, [], Relationships
  
  # (Not documented)
  # 
  # @method free_relationships(relationships)
  # @param [Relationships] relationships 
  # @return [nil] 
  # @scope class
  attach_function :free_relationships, :lxw_free_relationships, [Relationships], :void
  
  # (Not documented)
  # 
  # @method relationships_assemble_xml_file(self_)
  # @param [Relationships] self_ 
  # @return [nil] 
  # @scope class
  attach_function :relationships_assemble_xml_file, :lxw_relationships_assemble_xml_file, [Relationships], :void
  
  # (Not documented)
  # 
  # @method add_document_relationship(self_, type, target)
  # @param [Relationships] self_ 
  # @param [String] type 
  # @param [String] target 
  # @return [nil] 
  # @scope class
  attach_function :add_document_relationship, :lxw_add_document_relationship, [Relationships, :string, :string], :void
  
  # (Not documented)
  # 
  # @method add_package_relationship(self_, type, target)
  # @param [Relationships] self_ 
  # @param [String] type 
  # @param [String] target 
  # @return [nil] 
  # @scope class
  attach_function :add_package_relationship, :lxw_add_package_relationship, [Relationships, :string, :string], :void
  
  # (Not documented)
  # 
  # @method add_ms_package_relationship(self_, type, target)
  # @param [Relationships] self_ 
  # @param [String] type 
  # @param [String] target 
  # @return [nil] 
  # @scope class
  attach_function :add_ms_package_relationship, :lxw_add_ms_package_relationship, [Relationships, :string, :string], :void
  
  # (Not documented)
  # 
  # @method add_worksheet_relationship(self_, type, target, target_mode)
  # @param [Relationships] self_ 
  # @param [String] type 
  # @param [String] target 
  # @param [String] target_mode 
  # @return [nil] 
  # @scope class
  attach_function :add_worksheet_relationship, :lxw_add_worksheet_relationship, [Relationships, :string, :string, :string], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :font_count ::
  #   (Integer) 
  # :xf_count ::
  #   (Integer) 
  # :dxf_count ::
  #   (Integer) 
  # :num_format_count ::
  #   (Integer) 
  # :border_count ::
  #   (Integer) 
  # :fill_count ::
  #   (Integer) 
  # :xf_formats ::
  #   (Formats) 
  # :dxf_formats ::
  #   (Formats) 
  module StylesWrappers
    # @return [nil] 
    def free()
      Libxlsxwriter.styles_free(self)
    end
    
    # @return [nil] 
    def assemble_xml_file()
      Libxlsxwriter.styles_assemble_xml_file(self)
    end
  end
  
  class Styles < FFI::Struct
    include StylesWrappers
    layout :file, :pointer,
           :font_count, :uint,
           :xf_count, :uint,
           :dxf_count, :uint,
           :num_format_count, :uint,
           :border_count, :uint,
           :fill_count, :uint,
           :xf_formats, Formats,
           :dxf_formats, Formats
  end
  
  # *INDENT-ON*
  # 
  # @method styles_new()
  # @return [Styles] 
  # @scope class
  attach_function :styles_new, :lxw_styles_new, [], Styles
  
  # (Not documented)
  # 
  # @method styles_free(styles)
  # @param [Styles] styles 
  # @return [nil] 
  # @scope class
  attach_function :styles_free, :lxw_styles_free, [Styles], :void
  
  # (Not documented)
  # 
  # @method styles_assemble_xml_file(self_)
  # @param [Styles] self_ 
  # @return [nil] 
  # @scope class
  attach_function :styles_assemble_xml_file, :lxw_styles_assemble_xml_file, [Styles], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :file ::
  #   (FFI::Pointer(*FILE)) 
  # :workbook ::
  #   (Workbook) 
  # :buffer_size ::
  #   (Integer) 
  # :zipfile ::
  #   (FFI::Pointer(ZipFile)) 
  # :zipfile_info ::
  #   (unknown) 
  # :filename ::
  #   (String) 
  # :buffer ::
  #   (String) 
  # :tmpdir ::
  #   (String) 
  # :chart_count ::
  #   (Integer) 
  # :drawing_count ::
  #   (Integer) 
  module PackagerWrappers
    # @return [nil] 
    def free()
      Libxlsxwriter.packager_free(self)
    end
  end
  
  class Packager < FFI::Struct
    include PackagerWrappers
    layout :file, :pointer,
           :workbook, Workbook,
           :buffer_size, :ulong,
           :zipfile, :pointer,
           :zipfile_info, :char,
           :filename, :string,
           :buffer, :string,
           :tmpdir, :string,
           :chart_count, :ushort,
           :drawing_count, :ushort
  end
  
  # (Not documented)
  # 
  # @method packager_new(filename, tmpdir)
  # @param [String] filename 
  # @param [String] tmpdir 
  # @return [Packager] 
  # @scope class
  attach_function :packager_new, :lxw_packager_new, [:string, :string], Packager
  
  # (Not documented)
  # 
  # @method packager_free(packager)
  # @param [Packager] packager 
  # @return [nil] 
  # @scope class
  attach_function :packager_free, :lxw_packager_free, [Packager], :void
  
  # (Not documented)
  # 
  # @method create_package(self_)
  # @param [Packager] self_ 
  # @return [Symbol from _enum_error_] 
  # @scope class
  attach_function :create_package, :lxw_create_package, [Packager], :error
  
  # (Not documented)
  # 
  # = Fields:
  # :stqe_next ::
  #   (FFI::Pointer(*XmlAttribute)) 
  class XmlAttributeListEntries < FFI::Struct
    layout :stqe_next, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :key ::
  #   (Array<Integer>) 
  # :value ::
  #   (Array<Integer>) 
  # :list_entries ::
  #   (XmlAttributeListEntries) 
  class XmlAttribute < FFI::Struct
    layout :key, [:char, 256],
           :value, [:char, 256],
           :list_entries, XmlAttributeListEntries.by_value
  end
  
  # Use queue.h macros to define the xml_attribute_list type.
  # 
  # = Fields:
  # :stqh_first ::
  #   (XmlAttribute) 
  # :stqh_last ::
  #   (FFI::Pointer(**XmlAttribute)) 
  class XmlAttributeList < FFI::Struct
    layout :stqh_first, XmlAttribute,
           :stqh_last, :pointer
  end
  
  # Create a new attribute struct to add to a xml_attribute_list.
  # 
  # @method new_attribute_str(key, value)
  # @param [String] key 
  # @param [String] value 
  # @return [XmlAttribute] 
  # @scope class
  attach_function :new_attribute_str, :lxw_new_attribute_str, [:string, :string], XmlAttribute
  
  # (Not documented)
  # 
  # @method new_attribute_int(key, value)
  # @param [String] key 
  # @param [Integer] value 
  # @return [XmlAttribute] 
  # @scope class
  attach_function :new_attribute_int, :lxw_new_attribute_int, [:string, :uint], XmlAttribute
  
  # (Not documented)
  # 
  # @method new_attribute_dbl(key, value)
  # @param [String] key 
  # @param [Float] value 
  # @return [XmlAttribute] 
  # @scope class
  attach_function :new_attribute_dbl, :lxw_new_attribute_dbl, [:string, :double], XmlAttribute
  
  # Create the XML declaration in an XML file.
  # 
  # @param xmlfile A FILE pointer to the output XML file.
  # 
  # @method xml_declaration(xmlfile)
  # @param [FFI::Pointer(*FILE)] xmlfile 
  # @return [nil] 
  # @scope class
  attach_function :xml_declaration, :lxw_xml_declaration, [:pointer], :void
  
  # Write an XML start tag with optional attributes.
  # 
  # @param xmlfile    A FILE pointer to the output XML file.
  # @param tag        The XML tag to write.
  # @param attributes An optional list of attributes to add to the tag.
  # 
  # @method xml_start_tag(xmlfile, tag, attributes)
  # @param [FFI::Pointer(*FILE)] xmlfile 
  # @param [String] tag 
  # @param [XmlAttributeList] attributes 
  # @return [nil] 
  # @scope class
  attach_function :xml_start_tag, :lxw_xml_start_tag, [:pointer, :string, XmlAttributeList], :void
  
  # Write an XML start tag with optional un-encoded attributes.
  # This is a minor optimization for attributes that don't need encoding.
  # 
  # @param xmlfile    A FILE pointer to the output XML file.
  # @param tag        The XML tag to write.
  # @param attributes An optional list of attributes to add to the tag.
  # 
  # @method xml_start_tag_unencoded(xmlfile, tag, attributes)
  # @param [FFI::Pointer(*FILE)] xmlfile 
  # @param [String] tag 
  # @param [XmlAttributeList] attributes 
  # @return [nil] 
  # @scope class
  attach_function :xml_start_tag_unencoded, :lxw_xml_start_tag_unencoded, [:pointer, :string, XmlAttributeList], :void
  
  # Write an XML end tag.
  # 
  # @param xmlfile    A FILE pointer to the output XML file.
  # @param tag        The XML tag to write.
  # 
  # @method xml_end_tag(xmlfile, tag)
  # @param [FFI::Pointer(*FILE)] xmlfile 
  # @param [String] tag 
  # @return [nil] 
  # @scope class
  attach_function :xml_end_tag, :lxw_xml_end_tag, [:pointer, :string], :void
  
  # Write an XML empty tag with optional attributes.
  # 
  # @param xmlfile    A FILE pointer to the output XML file.
  # @param tag        The XML tag to write.
  # @param attributes An optional list of attributes to add to the tag.
  # 
  # @method xml_empty_tag(xmlfile, tag, attributes)
  # @param [FFI::Pointer(*FILE)] xmlfile 
  # @param [String] tag 
  # @param [XmlAttributeList] attributes 
  # @return [nil] 
  # @scope class
  attach_function :xml_empty_tag, :lxw_xml_empty_tag, [:pointer, :string, XmlAttributeList], :void
  
  # Write an XML empty tag with optional un-encoded attributes.
  # This is a minor optimization for attributes that don't need encoding.
  # 
  # @param xmlfile    A FILE pointer to the output XML file.
  # @param tag        The XML tag to write.
  # @param attributes An optional list of attributes to add to the tag.
  # 
  # @method xml_empty_tag_unencoded(xmlfile, tag, attributes)
  # @param [FFI::Pointer(*FILE)] xmlfile 
  # @param [String] tag 
  # @param [XmlAttributeList] attributes 
  # @return [nil] 
  # @scope class
  attach_function :xml_empty_tag_unencoded, :lxw_xml_empty_tag_unencoded, [:pointer, :string, XmlAttributeList], :void
  
  # Write an XML element containing data and optional attributes.
  # 
  # @param xmlfile    A FILE pointer to the output XML file.
  # @param tag        The XML tag to write.
  # @param data       The data section of the XML element.
  # @param attributes An optional list of attributes to add to the tag.
  # 
  # @method xml_data_element(xmlfile, tag, data, attributes)
  # @param [FFI::Pointer(*FILE)] xmlfile 
  # @param [String] tag 
  # @param [String] data 
  # @param [XmlAttributeList] attributes 
  # @return [nil] 
  # @scope class
  attach_function :xml_data_element, :lxw_xml_data_element, [:pointer, :string, :string, XmlAttributeList], :void
  
  # (Not documented)
  # 
  # @method escape_control_characters(string)
  # @param [String] string 
  # @return [String] 
  # @scope class
  attach_function :escape_control_characters, :lxw_escape_control_characters, [:string], :string
  
  # (Not documented)
  # 
  # @method escape_data(data)
  # @param [String] data 
  # @return [String] 
  # @scope class
  attach_function :escape_data, :lxw_escape_data, [:string], :string
  
end
